{"metadata":"{\"defaultCompiler\":{\"version\":\"0.6.11\"},\"sources\":{\"contracts/TroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.11;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\ninterface IPriceFeed {\\r\\n    // --- Events ---\\r\\n    event LastGoodPriceUpdated(uint256 _lastGoodPrice);\\r\\n\\r\\n    // --- Function ---\\r\\n\\r\\n    /// @notice Returns the latest price obtained from the Oracle. Called by Zero functions that require a current price.\\r\\n    ///         It uses the main price feed and fallback to the backup one in case of an error. If both fail return the last\\r\\n    ///         good price seen.\\r\\n    /// @dev It's also callable by anyone externally\\r\\n    /// @return The price\\r\\n    function fetchPrice() external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface ILiquityBaseParams {\\r\\n\\r\\n    /// Minimum collateral ratio for individual troves\\r\\n    function MCR() external view returns (uint);\\r\\n\\r\\n    /// Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\r\\n    function CCR() external view returns (uint);\\r\\n\\r\\n    function PERCENT_DIVISOR() external view returns (uint);\\r\\n\\r\\n    function BORROWING_FEE_FLOOR() external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * Half-life of 12h. 12h = 720 min\\r\\n     * (1/2) = d^720 => d = (1/2)^(1/720)\\r\\n     */\\r\\n    function REDEMPTION_FEE_FLOOR() external view returns (uint);\\r\\n\\r\\n    function MAX_BORROWING_FEE() external view returns (uint);\\r\\n\\r\\n}\\r\\n\\r\\ninterface ILiquityBase {\\r\\n    /// @return PriceFeed contract\\r\\n    function priceFeed() external view returns (IPriceFeed);\\r\\n\\r\\n    /// @return LiquityBaseParams contract\\r\\n    function liquityBaseParams() external view returns (ILiquityBaseParams);\\r\\n}\\r\\n\\r\\ninterface IMassetManager {\\r\\n    struct PermitParams {\\r\\n        uint256 deadline;\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n    }\\r\\n\\r\\n    function mintTo(\\r\\n        address _bAsset,\\r\\n        uint256 _bAssetQuantity,\\r\\n        address _recipient\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getToken() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\\r\\n     *      relative mAsset quantity from the sender. Sender also incurs a small fee, if any.\\r\\n     * @param _bAsset           Address of the bAsset to redeem.\\r\\n     * @param _massetQuantity   Units of the masset to redeem.\\r\\n     * @param _recipient        Address to credit with withdrawn bAssets.\\r\\n     * @return massetRedeemed   Relative number of mAsset units burned to pay for the bAssets.\\r\\n     */\\r\\n    function redeemTo(\\r\\n        address _bAsset,\\r\\n        uint256 _massetQuantity,\\r\\n        address _recipient\\r\\n    ) external returns (uint256 massetRedeemed);\\r\\n}\\r\\n\\r\\n/**\\r\\n * The Stability Pool holds ZUSD tokens deposited by Stability Pool depositors.\\r\\n *\\r\\n * When a trove is liquidated, then depending on system conditions, some of its ZUSD debt gets offset with\\r\\n * ZUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of ZUSD tokens in the Stability Pool is burned.\\r\\n *\\r\\n * Thus, a liquidation causes each depositor to receive a ZUSD loss, in proportion to their deposit as a share of total deposits.\\r\\n * They also receive an ETH gain, as the ETH collateral of the liquidated trove is distributed among Stability depositors,\\r\\n * in the same proportion.\\r\\n *\\r\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\r\\n * of the total ZUSD in the Stability Pool, depletes 40% of each deposit.\\r\\n *\\r\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\r\\n * multiplying it by some factor in range ]0,1[\\r\\n *\\r\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / ETH gain derivations:\\r\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\r\\n *\\r\\n * --- ZERO ISSUANCE TO STABILITY POOL DEPOSITORS ---\\r\\n *\\r\\n * An ZERO issuance event occurs at every deposit operation, and every liquidation.\\r\\n *\\r\\n * Each deposit is tagged with the address of the front end through which it was made.\\r\\n *\\r\\n * All deposits earn a share of the issued ZERO in proportion to the deposit as a share of total deposits. The ZERO earned\\r\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\r\\n *\\r\\n * Please see the system Readme for an overview:\\r\\n * https://github.com/liquity/dev/blob/main/README.md#zero-issuance-to-stability-providers\\r\\n */\\r\\ninterface IStabilityPool {\\r\\n    // --- Events ---\\r\\n\\r\\n    event StabilityPoolETHBalanceUpdated(uint _newBalance);\\r\\n    event StabilityPoolZUSDBalanceUpdated(uint _newBalance);\\r\\n\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\r\\n    event ZUSDTokenAddressChanged(address _newZUSDTokenAddress);\\r\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\r\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\r\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\r\\n\\r\\n    event P_Updated(uint _P);\\r\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\r\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\r\\n    event EpochUpdated(uint128 _currentEpoch);\\r\\n    event ScaleUpdated(uint128 _currentScale);\\r\\n\\r\\n    event FrontEndRegistered(address indexed _frontEnd, uint _kickbackRate);\\r\\n    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\\r\\n\\r\\n    event DepositSnapshotUpdated(address indexed _depositor, uint _P, uint _S, uint _G);\\r\\n    event FrontEndSnapshotUpdated(address indexed _frontEnd, uint _P, uint _G);\\r\\n    event UserDepositChanged(address indexed _depositor, uint _newDeposit);\\r\\n    event FrontEndStakeChanged(\\r\\n        address indexed _frontEnd,\\r\\n        uint _newFrontEndStake,\\r\\n        address _depositor\\r\\n    );\\r\\n\\r\\n    event ETHGainWithdrawn(address indexed _depositor, uint _ETH, uint _ZUSDLoss);\\r\\n    event ZEROPaidToDepositor(address indexed _depositor, uint _ZERO);\\r\\n    event ZEROPaidToFrontEnd(address indexed _frontEnd, uint _ZERO);\\r\\n    event EtherSent(address _to, uint _amount);\\r\\n\\r\\n    event WithdrawFromSpAndConvertToDLLR(\\r\\n        address _depositor,\\r\\n        uint256 _zusdAmountRequested,\\r\\n        uint256 _dllrAmountReceived\\r\\n    );\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    /**\\r\\n     * @notice Called only once on init, to set addresses of other Liquity contracts. Callable only by owner\\r\\n     * @dev initializer function, checks addresses are contracts\\r\\n     * @param _liquityBaseParamsAddress LiquidityBaseParams contract address\\r\\n     * @param _borrowerOperationsAddress BorrowerOperations contract address\\r\\n     * @param _troveManagerAddress TroveManager contract address\\r\\n     * @param _activePoolAddress ActivePool contract address\\r\\n     * @param _zusdTokenAddress ZUSDToken contract address\\r\\n     * @param _sortedTrovesAddress SortedTroves contract address\\r\\n     * @param _priceFeedAddress PriceFeed contract address\\r\\n     * @param _communityIssuanceAddress CommunityIssuanceAddress\\r\\n     */\\r\\n    function setAddresses(\\r\\n        address _liquityBaseParamsAddress,\\r\\n        address _borrowerOperationsAddress,\\r\\n        address _troveManagerAddress,\\r\\n        address _activePoolAddress,\\r\\n        address _zusdTokenAddress,\\r\\n        address _sortedTrovesAddress,\\r\\n        address _priceFeedAddress,\\r\\n        address _communityIssuanceAddress\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Initial checks:\\r\\n     *  - Frontend is registered or zero address\\r\\n     *  - Sender is not a registered frontend\\r\\n     *  - _amount is not zero\\r\\n     *  ---\\r\\n     *  - Triggers a ZERO issuance, based on time passed since the last issuance. The ZERO issuance is shared between *all* depositors and front ends\\r\\n     *  - Tags the deposit with the provided front end tag param, if it's a new deposit\\r\\n     *  - Sends depositor's accumulated gains (ZERO, ETH) to depositor\\r\\n     *  - Sends the tagged front end's accumulated ZERO gains to the tagged front end\\r\\n     *  - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\r\\n     * @param _amount amount to provide\\r\\n     * @param _frontEndTag frontend address to receive accumulated ZERO gains\\r\\n     */\\r\\n    function provideToSP(uint _amount, address _frontEndTag) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Initial checks:\\r\\n     *    - _amount is zero or there are no under collateralized troves left in the system\\r\\n     *    - User has a non zero deposit\\r\\n     *    ---\\r\\n     *    - Triggers a ZERO issuance, based on time passed since the last issuance. The ZERO issuance is shared between *all* depositors and front ends\\r\\n     *    - Removes the deposit's front end tag if it is a full withdrawal\\r\\n     *    - Sends all depositor's accumulated gains (ZERO, ETH) to depositor\\r\\n     *    - Sends the tagged front end's accumulated ZERO gains to the tagged front end\\r\\n     *    - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\r\\n     *\\r\\n     *    If _amount > userDeposit, the user withdraws all of their compounded deposit.\\r\\n     * @param _amount amount to withdraw\\r\\n     */\\r\\n    function withdrawFromSP(uint _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Initial checks:\\r\\n     *    - User has a non zero deposit\\r\\n     *    - User has an open trove\\r\\n     *    - User has some ETH gain\\r\\n     *    ---\\r\\n     *    - Triggers a ZERO issuance, based on time passed since the last issuance. The ZERO issuance is shared between *all* depositors and front ends\\r\\n     *    - Sends all depositor's ZERO gain to  depositor\\r\\n     *    - Sends all tagged front end's ZERO gain to the tagged front end\\r\\n     *    - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove\\r\\n     *    - Leaves their compounded deposit in the Stability Pool\\r\\n     *    - Updates snapshots for deposit and tagged front end stake\\r\\n     * @param _upperHint upper trove id hint\\r\\n     * @param _lowerHint lower trove id hint\\r\\n     */\\r\\n    function withdrawETHGainToTrove(address _upperHint, address _lowerHint) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Initial checks:\\r\\n     *    - Frontend (sender) not already registered\\r\\n     *    - User (sender) has no deposit\\r\\n     *    - _kickbackRate is in the range [0, 100%]\\r\\n     *    ---\\r\\n     *    Front end makes a one-time selection of kickback rate upon registering\\r\\n     * @param _kickbackRate kickback rate selected by frontend\\r\\n     */\\r\\n    function registerFrontEnd(uint _kickbackRate) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Initial checks:\\r\\n     *    - Caller is TroveManager\\r\\n     *    ---\\r\\n     *    Cancels out the specified debt against the ZUSD contained in the Stability Pool (as far as possible)\\r\\n     *    and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\\r\\n     *    Only called by liquidation functions in the TroveManager.\\r\\n     * @param _debt debt to cancel\\r\\n     * @param _coll collateral to transfer\\r\\n     */\\r\\n    function offset(uint _debt, uint _coll) external;\\r\\n\\r\\n    /**\\r\\n     * @return the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`,\\r\\n     * to exclude edge cases like ETH received from a self-destruct.\\r\\n     */\\r\\n    function getETH() external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @return ZUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\r\\n     */\\r\\n    function getTotalZUSDDeposits() external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the ETH gain earned by the deposit since its last snapshots were taken.\\r\\n     * @param _depositor address to calculate ETH gain\\r\\n     * @return ETH gain from given depositor\\r\\n     */\\r\\n    function getDepositorETHGain(address _depositor) external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the ZERO gain earned by a deposit since its last snapshots were taken.\\r\\n     *    If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\r\\n     *    Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\r\\n     *    which they made their deposit.\\r\\n     * @param _depositor address to calculate ETH gain\\r\\n     * @return ZERO gain from given depositor\\r\\n     */\\r\\n    function getDepositorZEROGain(address _depositor) external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @param _frontEnd front end address\\r\\n     * @return the ZERO gain earned by the front end.\\r\\n     */\\r\\n    function getFrontEndZEROGain(address _frontEnd) external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @param _depositor depositor address\\r\\n     * @return the user's compounded deposit.\\r\\n     */\\r\\n    function getCompoundedZUSDDeposit(address _depositor) external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @notice The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\r\\n     * @param _frontEnd front end address\\r\\n     * @return the front end's compounded stake.\\r\\n     */\\r\\n    function getCompoundedFrontEndStake(address _frontEnd) external view returns (uint);\\r\\n\\r\\n    //DLLR _owner or _spender can convert a specified amount of DLLR into ZUSD via Sovryn Mynt and deposit the ZUSD into the Zero Stability Pool, all in a single transaction\\r\\n    function provideToSpFromDLLR(\\r\\n        uint _dllrAmount,\\r\\n        IMassetManager.PermitParams calldata _permitParams\\r\\n    ) external;\\r\\n\\r\\n    /// Stability Pool depositor can withdraw a specified amount of ZUSD from the Zero Stability Pool and optionally convert the ZUSD to DLLR via Sovryn Mynt, all in a single transaction\\r\\n    function withdrawFromSpAndConvertToDLLR(uint256 _zusdAmount) external;\\r\\n\\r\\n    /**\\r\\n     * Fallback function\\r\\n     * Only callable by Active Pool, it just accounts for ETH received\\r\\n     * receive() external payable;\\r\\n     */\\r\\n}\\r\\n\\r\\n/**\\r\\n * Based on the OpenZeppelin IER20 interface:\\r\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\r\\n *\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change one's\\r\\n * {IERC20-allowance} without having to send a transaction, by signing a\\r\\n * message. This allows users to spend tokens without having to hold Ether.\\r\\n *\\r\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\r\\n * \\r\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\r\\n */\\r\\ninterface IERC2612 {\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\r\\n     * given `owner`'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(address owner, address spender, uint256 amount, \\r\\n                    uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     *\\r\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to \\r\\n     * a value in the near future. The deadline argument can be set to uint(-1) to \\r\\n     * create Permits that effectively never expire.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n    \\r\\n    function version() external view returns (string memory);\\r\\n    function permitTypeHash() external view returns (bytes32);\\r\\n    function domainSeparator() external view returns (bytes32);\\r\\n}\\r\\n\\r\\ninterface IZUSDToken is IERC20, IERC2612 { \\r\\n    \\r\\n    // --- Events ---\\r\\n\\r\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\r\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n\\r\\n    event ZUSDTokenBalanceUpdated(address _user, uint _amount);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    function mint(address _account, uint256 _amount) external;\\r\\n\\r\\n    function burn(address _account, uint256 _amount) external;\\r\\n\\r\\n    function sendToPool(address _sender,  address poolAddress, uint256 _amount) external;\\r\\n\\r\\n    function returnFromPool(address poolAddress, address user, uint256 _amount ) external;\\r\\n}\\r\\n\\r\\ninterface IZEROToken is IERC20, IERC2612 { \\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    /// @notice send zero tokens to ZEROStaking contract\\r\\n    /// @param _sender sender address\\r\\n    /// @param _amount amount to send\\r\\n    function sendToZEROStaking(address _sender, uint256 _amount) external;\\r\\n\\r\\n    /// @return deployment start time\\r\\n    function getDeploymentStartTime() external view returns (uint256);\\r\\n\\r\\n}\\r\\n\\r\\ninterface IZEROStaking {\\r\\n    // --- Events --\\r\\n\\r\\n    event ZEROTokenAddressSet(address _zeroTokenAddress);\\r\\n    event ZUSDTokenAddressSet(address _zusdTokenAddress);\\r\\n    event FeeDistributorAddressAddressSet(address _feeDistributorAddress);\\r\\n    event ActivePoolAddressSet(address _activePoolAddress);\\r\\n\\r\\n    event StakeChanged(address indexed staker, uint256 newStake);\\r\\n    event StakingGainsWithdrawn(address indexed staker, uint256 ZUSDGain, uint256 ETHGain);\\r\\n    event F_ETHUpdated(uint256 _F_ETH);\\r\\n    event F_ZUSDUpdated(uint256 _F_ZUSD);\\r\\n    event TotalZEROStakedUpdated(uint256 _totalZEROStaked);\\r\\n    event EtherSent(address _account, uint256 _amount);\\r\\n    event StakerSnapshotsUpdated(address _staker, uint256 _F_ETH, uint256 _F_ZUSD);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    /**\\r\\n     * @notice Called only once on init, to set addresses of other Zero contracts. Callable only by owner\\r\\n     * @dev initializer function, checks addresses are contracts\\r\\n     * @param _zeroTokenAddress ZEROToken contract address\\r\\n     * @param _zusdTokenAddress ZUSDToken contract address\\r\\n     * @param _feeDistributorAddress FeeDistributorAddress contract address\\r\\n     * @param _activePoolAddress ActivePool contract address\\r\\n     */\\r\\n    function setAddresses(\\r\\n        address _zeroTokenAddress,\\r\\n        address _zusdTokenAddress,\\r\\n        address _feeDistributorAddress,\\r\\n        address _activePoolAddress\\r\\n    ) external;\\r\\n\\r\\n    /// @notice If caller has a pre-existing stake, send any accumulated ETH and ZUSD gains to them.\\r\\n    /// @param _ZEROamount ZERO tokens to stake\\r\\n    function stake(uint256 _ZEROamount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Unstake the ZERO and send the it back to the caller, along with their accumulated ZUSD & ETH gains.\\r\\n     * If requested amount > stake, send their entire stake.\\r\\n     * @param _ZEROamount ZERO tokens to unstake\\r\\n     */\\r\\n    function unstake(uint256 _ZEROamount) external;\\r\\n\\r\\n    /// @param _ETHFee ETH fee\\r\\n    /// @notice increase ETH fee\\r\\n    function increaseF_ETH(uint256 _ETHFee) external;\\r\\n\\r\\n    /// @param _ZEROFee ZUSD fee\\r\\n    /// @notice increase ZUSD fee\\r\\n    function increaseF_ZUSD(uint256 _ZEROFee) external;\\r\\n\\r\\n    /// @param _user user address\\r\\n    /// @return pending ETH gain of given user\\r\\n    function getPendingETHGain(address _user) external view returns (uint256);\\r\\n\\r\\n    /// @param _user user address\\r\\n    /// @return pending ZUSD gain of given user\\r\\n    function getPendingZUSDGain(address _user) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/// Common interface for the Trove Manager.\\r\\ninterface ITroveManager is ILiquityBase {\\r\\n    // --- Events ---\\r\\n\\r\\n    event FeeDistributorAddressChanged(address _feeDistributorAddress);\\r\\n    event TroveManagerRedeemOpsAddressChanged(address _troveManagerRedeemOps);\\r\\n    event LiquityBaseParamsAddressChanges(address _borrowerOperationsAddress);\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\r\\n    event ZUSDTokenAddressChanged(address _newZUSDTokenAddress);\\r\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\r\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\r\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\r\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\r\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\r\\n    event ZEROTokenAddressChanged(address _zeroTokenAddress);\\r\\n    event ZEROStakingAddressChanged(address _zeroStakingAddress);\\r\\n\\r\\n    event Liquidation(\\r\\n        uint256 _liquidatedDebt,\\r\\n        uint256 _liquidatedColl,\\r\\n        uint256 _collGasCompensation,\\r\\n        uint256 _ZUSDGasCompensation\\r\\n    );\\r\\n    event Redemption(\\r\\n        uint256 _attemptedZUSDAmount,\\r\\n        uint256 _actualZUSDAmount,\\r\\n        uint256 _ETHSent,\\r\\n        uint256 _ETHFee\\r\\n    );\\r\\n    event TroveUpdated(\\r\\n        address indexed _borrower,\\r\\n        uint256 _debt,\\r\\n        uint256 _coll,\\r\\n        uint256 stake,\\r\\n        uint8 operation\\r\\n    );\\r\\n    event TroveLiquidated(\\r\\n        address indexed _borrower,\\r\\n        uint256 _debt,\\r\\n        uint256 _coll,\\r\\n        uint8 operation\\r\\n    );\\r\\n    event BaseRateUpdated(uint256 _baseRate);\\r\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\r\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\r\\n    event SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\r\\n    event LTermsUpdated(uint256 _L_ETH, uint256 _L_ZUSDDebt);\\r\\n    event TroveSnapshotsUpdated(uint256 _L_ETH, uint256 _L_ZUSDDebt);\\r\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\r\\n\\r\\n    struct TroveManagerInitAddressesParams {\\r\\n        address _feeDistributorAddress;\\r\\n        address _troveManagerRedeemOps;\\r\\n        address _liquityBaseParamsAddress;\\r\\n        address _borrowerOperationsAddress;\\r\\n        address _activePoolAddress;\\r\\n        address _defaultPoolAddress;\\r\\n        address _stabilityPoolAddress;\\r\\n        address _gasPoolAddress;\\r\\n        address _collSurplusPoolAddress;\\r\\n        address _priceFeedAddress;\\r\\n        address _zusdTokenAddress;\\r\\n        address _sortedTrovesAddress;\\r\\n        address _zeroTokenAddress;\\r\\n        address _zeroStakingAddress;\\r\\n    }\\r\\n\\r\\n    // --- Functions ---\\r\\n    /**\\r\\n     * @notice Called only once on init, to set addresses of other Zero contracts. Callable only by owner\\r\\n     * @dev initializer function, checks addresses are contracts\\r\\n     * @param _troveManagerInitAddresses addresses list to intialize TroveManager with _\\r\\n     *        _feeDistributorAddress feeDistributor contract address\\r\\n     *        _troveManagerRedeemOps TroveManagerRedeemOps contract address\\r\\n     *        _liquityBaseParamsAddress LiquityBaseParams contract address\\r\\n     *        _borrowerOperationsAddress BorrowerOperations contract address\\r\\n     *        _activePoolAddress ActivePool contract address\\r\\n     *        _defaultPoolAddress DefaultPool contract address\\r\\n     *        _stabilityPoolAddress StabilityPool contract address\\r\\n     *        _gasPoolAddress GasPool contract address\\r\\n     *        _collSurplusPoolAddress CollSurplusPool contract address\\r\\n     *        _priceFeedAddress PriceFeed contract address\\r\\n     *        _zusdTokenAddress ZUSDToken contract address\\r\\n     *        _sortedTrovesAddress SortedTroves contract address\\r\\n     *        _zeroTokenAddress ZEROToken contract address\\r\\n     *        _zeroStakingAddress ZEROStaking contract address\\r\\n     */\\r\\n    function setAddresses(\\r\\n        TroveManagerInitAddressesParams memory _troveManagerInitAddresses\\r\\n    ) external;\\r\\n\\r\\n    function setTroveManagerRedeemOps(address _troveManagerRedeemOps) external;\\r\\n\\r\\n    /// @return Trove owners count\\r\\n    function getTroveOwnersCount() external view returns (uint256);\\r\\n\\r\\n    /// @param _index Trove owner index\\r\\n    /// @return Trove from TroveOwners array in given index\\r\\n    function getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\\r\\n\\r\\n    /// @param _borrower borrower address\\r\\n    /// @return the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\\r\\n    function getNominalICR(address _borrower) external view returns (uint256);\\r\\n\\r\\n    /// @notice computes the user’s individual collateralization ratio (ICR) based on their total collateral and total ZUSD debt. Returns 2^256 -1 if they have 0 debt.\\r\\n    /// @param _borrower borrower address\\r\\n    /// @param _price ETH price\\r\\n    /// @return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\r\\n    function getCurrentICR(address _borrower, uint256 _price) external view returns (uint256);\\r\\n\\r\\n    /// @notice Closes the trove if its ICR is lower than the minimum collateral ratio.\\r\\n    /// @param _borrower borrower address\\r\\n    function liquidate(address _borrower) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves,\\r\\n     * starting from the one with the lowest collateral ratio in the system, and moving upwards\\r\\n     * @param _n max number of under-collateralized Troves to liquidate\\r\\n     */\\r\\n    function liquidateTroves(uint256 _n) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Attempt to liquidate a custom list of troves provided by the caller.\\r\\n     * @param _troveArray list of trove addresses\\r\\n     */\\r\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Send _ZUSDamount ZUSD to the system and redeem the corresponding amount of collateral from as many Troves as are needed to fill the redemption\\r\\n     * request.  Applies pending rewards to a Trove before reducing its debt and coll.\\r\\n     *\\r\\n     * Note that if _amount is very large, this function can run out of gas, specially if traversed troves are small. This can be easily avoided by\\r\\n     * splitting the total _amount in appropriate chunks and calling the function multiple times.\\r\\n     *\\r\\n     * Param `_maxIterations` can also be provided, so the loop through Troves is capped (if it’s zero, it will be ignored).This makes it easier to\\r\\n     * avoid OOG for the frontend, as only knowing approximately the average cost of an iteration is enough, without needing to know the “topology”\\r\\n     * of the trove list. It also avoids the need to set the cap in stone in the contract, nor doing gas calculations, as both gas price and opcode\\r\\n     * costs can vary.\\r\\n     *\\r\\n     * All Troves that are redeemed from -- with the likely exception of the last one -- will end up with no debt left, therefore they will be closed.\\r\\n     * If the last Trove does have some remaining debt, it has a finite ICR, and the reinsertion could be anywhere in the list, therefore it requires a hint.\\r\\n     * A frontend should use getRedemptionHints() to calculate what the ICR of this Trove will be after redemption, and pass a hint for its position\\r\\n     * in the sortedTroves list along with the ICR value that the hint was found for.\\r\\n     *\\r\\n     * If another transaction modifies the list between calling getRedemptionHints() and passing the hints to redeemCollateral(), it\\r\\n     * is very likely that the last (partially) redeemed Trove would end up with a different ICR than what the hint is for. In this case the\\r\\n     * redemption will stop after the last completely redeemed Trove and the sender will keep the remaining ZUSD amount, which they can attempt\\r\\n     * to redeem later.\\r\\n     *\\r\\n     * @param _ZUSDAmount ZUSD amount to send to the system\\r\\n     * @param _firstRedemptionHint calculated ICR hint of first trove after redemption\\r\\n     * @param _maxIterations max Troves iterations (can be 0)\\r\\n     * @param _maxFee max fee percentage to accept\\r\\n     */\\r\\n    function redeemCollateral(\\r\\n        uint256 _ZUSDAmount,\\r\\n        address _firstRedemptionHint,\\r\\n        address _upperPartialRedemptionHint,\\r\\n        address _lowerPartialRedemptionHint,\\r\\n        uint256 _partialRedemptionHintNICR,\\r\\n        uint256 _maxIterations,\\r\\n        uint256 _maxFee\\r\\n    ) external;\\r\\n\\r\\n    function redeemCollateralViaDLLR(\\r\\n        uint256 _dllrAmount,\\r\\n        address _firstRedemptionHint,\\r\\n        address _upperPartialRedemptionHint,\\r\\n        address _lowerPartialRedemptionHint,\\r\\n        uint256 _partialRedemptionHintNICR,\\r\\n        uint256 _maxIterations,\\r\\n        uint256 _maxFeePercentage,\\r\\n        IMassetManager.PermitParams calldata _permitParams\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Update borrower's stake based on their latest collateral value\\r\\n    /// @param _borrower borrower address\\r\\n    function updateStakeAndTotalStakes(address _borrower) external returns (uint256);\\r\\n\\r\\n    /// @notice Update borrower's snapshots of L_ETH and L_ZUSDDebt to reflect the current values\\r\\n    /// @param _borrower borrower address\\r\\n    function updateTroveRewardSnapshots(address _borrower) external;\\r\\n\\r\\n    /// @notice Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\r\\n    /// @param _borrower borrower address\\r\\n    /// @return index where Trove was inserted\\r\\n    function addTroveOwnerToArray(address _borrower) external returns (uint256 index);\\r\\n\\r\\n    /// @notice Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\r\\n    /// @param _borrower borrower address\\r\\n    function applyPendingRewards(address _borrower) external;\\r\\n\\r\\n    /// @param _borrower borrower address\\r\\n    /// @return the borrower's pending accumulated ETH reward, earned by their stake\\r\\n    function getPendingETHReward(address _borrower) external view returns (uint256);\\r\\n\\r\\n    /// @param _borrower borrower address\\r\\n    /// @return the borrower's pending accumulated ZUSD reward, earned by their stake\\r\\n    function getPendingZUSDDebtReward(address _borrower) external view returns (uint256);\\r\\n\\r\\n    /*\\r\\n     * @notice A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\r\\n     * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\r\\n     * pending rewards\\r\\n     *\\r\\n     * @param _borrower borrower address\\r\\n     * @return true if has pending rewards\\r\\n     */\\r\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\r\\n\\r\\n    /// @notice returns the Troves entire debt and coll, including pending rewards from redistributions.\\r\\n    /// @param _borrower borrower address\\r\\n    function getEntireDebtAndColl(\\r\\n        address _borrower\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 debt,\\r\\n            uint256 coll,\\r\\n            uint256 pendingZUSDDebtReward,\\r\\n            uint256 pendingETHReward\\r\\n        );\\r\\n\\r\\n    /// @notice Close given trove. Called by BorrowerOperations.\\r\\n    /// @param _borrower borrower address\\r\\n    function closeTrove(address _borrower) external;\\r\\n\\r\\n    /// @notice Remove borrower's stake from the totalStakes sum, and set their stake to 0\\r\\n    /// @param _borrower borrower address\\r\\n    function removeStake(address _borrower) external;\\r\\n\\r\\n    /// @return calculated redemption rate using baseRate\\r\\n    function getRedemptionRate() external view returns (uint256);\\r\\n\\r\\n    /// @return calculated redemption rate using calculated decayed as base rate\\r\\n    function getRedemptionRateWithDecay() external view returns (uint256);\\r\\n\\r\\n    /// @notice The redemption fee is taken as a cut of the total ETH drawn from the system in a redemption. It is based on the current redemption rate.\\r\\n    /// @param _ETHDrawn ETH drawn\\r\\n    function getRedemptionFeeWithDecay(uint256 _ETHDrawn) external view returns (uint256);\\r\\n\\r\\n    /// @return borrowing rate\\r\\n    function getBorrowingRate() external view returns (uint256);\\r\\n\\r\\n    /// @return borrowing rate calculated using decayed as base rate\\r\\n    function getBorrowingRateWithDecay() external view returns (uint256);\\r\\n\\r\\n    /// @param ZUSDDebt ZUSD debt amount to calculate fee\\r\\n    /// @return borrowing fee using borrowing rate\\r\\n    function getBorrowingFee(uint256 ZUSDDebt) external view returns (uint256);\\r\\n\\r\\n    /// @param _ZUSDDebt ZUSD debt amount to calculate fee\\r\\n    /// @return borrowing fee using borrowing rate with decay\\r\\n    function getBorrowingFeeWithDecay(uint256 _ZUSDDebt) external view returns (uint256);\\r\\n\\r\\n    /// @notice Updates the baseRate state variable based on time elapsed since the last redemption or ZUSD borrowing operation.\\r\\n    function decayBaseRateFromBorrowing() external;\\r\\n\\r\\n    /// @param _borrower borrower address\\r\\n    /// @return Trove status from given trove\\r\\n    function getTroveStatus(address _borrower) external view returns (uint256);\\r\\n\\r\\n    /// @param _borrower borrower address\\r\\n    /// @return Trove stake from given trove\\r\\n    function getTroveStake(address _borrower) external view returns (uint256);\\r\\n\\r\\n    /// @param _borrower borrower address\\r\\n    /// @return Trove debt from given trove\\r\\n    function getTroveDebt(address _borrower) external view returns (uint256);\\r\\n\\r\\n    /// @param _borrower borrower address\\r\\n    /// @return Trove collateral from given trove\\r\\n    function getTroveColl(address _borrower) external view returns (uint256);\\r\\n\\r\\n    /// @param _borrower borrower address\\r\\n    /// @param num status to set\\r\\n    function setTroveStatus(address _borrower, uint256 num) external;\\r\\n\\r\\n    /// @param _borrower borrower address\\r\\n    /// @param _collIncrease amount of collateral to increase\\r\\n    /// @return new trove collateral\\r\\n    function increaseTroveColl(\\r\\n        address _borrower,\\r\\n        uint256 _collIncrease\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /// @param _borrower borrower address\\r\\n    /// @param _collDecrease amount of collateral to decrease\\r\\n    /// @return new trove collateral\\r\\n    function decreaseTroveColl(\\r\\n        address _borrower,\\r\\n        uint256 _collDecrease\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /// @param _borrower borrower address\\r\\n    /// @param _debtIncrease amount of debt to increase\\r\\n    /// @return new trove debt\\r\\n    function increaseTroveDebt(\\r\\n        address _borrower,\\r\\n        uint256 _debtIncrease\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /// @param _borrower borrower address\\r\\n    /// @param _debtDecrease amount of debt to decrease\\r\\n    /// @return new trove debt\\r\\n    function decreaseTroveDebt(\\r\\n        address _borrower,\\r\\n        uint256 _debtDecrease\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @param _price ETH price\\r\\n     * @return the total collateralization ratio (TCR) of the system.\\r\\n     * The TCR is based on the the entire system debt and collateral (including pending rewards).\\r\\n     */\\r\\n    function getTCR(uint256 _price) external view returns (uint256);\\r\\n\\r\\n    function MCR() external view returns (uint256);\\r\\n\\r\\n    function CCR() external view returns (uint256);\\r\\n\\r\\n    /// @notice reveals whether or not the system is in Recovery Mode (i.e. whether the Total Collateralization Ratio (TCR) is below the Critical Collateralization Ratio (CCR)).\\r\\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface ICollSurplusPool {\\r\\n    // --- Events ---\\r\\n\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\r\\n\\r\\n    event CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\r\\n    event EtherSent(address _to, uint256 _amount);\\r\\n\\r\\n    // --- Contract setters ---\\r\\n\\r\\n    /**\\r\\n     * @notice Called only once on init, to set addresses of other Zero contracts. Callable only by owner\\r\\n     * @dev initializer function, checks addresses are contracts\\r\\n     * @param _borrowerOperationsAddress BorrowerOperations contract address\\r\\n     * @param _troveManagerAddress TroveManager contract address\\r\\n     * @param _activePoolAddress ActivePool contract address\\r\\n     */\\r\\n    function setAddresses(\\r\\n        address _borrowerOperationsAddress,\\r\\n        address _troveManagerAddress,\\r\\n        address _activePoolAddress\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Not necessarily equal to the raw ether balance - ether can be forcibly sent to contracts.\\r\\n    /// @return ETH state variable\\r\\n    function getETH() external view returns (uint256);\\r\\n\\r\\n    /// @param _account account to retrieve collateral\\r\\n    /// @return collateral\\r\\n    function getCollateral(address _account) external view returns (uint256);\\r\\n\\r\\n    /// @notice adds amount to current account balance. Only callable by TroveManager.\\r\\n    /// @param _account account to add amount\\r\\n    /// @param _amount amount to add\\r\\n    function accountSurplus(address _account, uint256 _amount) external;\\r\\n\\r\\n    /// @notice claims collateral for given account. Only callable by BorrowerOperations.\\r\\n    /// @param _account account to send claimable collateral\\r\\n    function claimColl(address _account) external;\\r\\n}\\r\\n\\r\\n// Common interface for the SortedTroves Doubly Linked List.\\r\\ninterface ISortedTroves {\\r\\n    // --- Events ---\\r\\n\\r\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\r\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\r\\n    event NodeAdded(address _id, uint256 _NICR);\\r\\n    event NodeRemoved(address _id);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    /**\\r\\n     * @notice Called only once on init, to set addresses of other Zero contracts and size. Callable only by owner\\r\\n     * @dev initializer function, checks addresses are contracts\\r\\n     * @param _size max size of troves list\\r\\n     * @param _TroveManagerAddress TroveManager contract address\\r\\n     * @param _borrowerOperationsAddress BorrowerOperations contract address\\r\\n     */\\r\\n    function setParams(\\r\\n        uint256 _size,\\r\\n        address _TroveManagerAddress,\\r\\n        address _borrowerOperationsAddress\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Add a node to the list\\r\\n     * @param _id Node's id\\r\\n     * @param _ICR Node's NICR\\r\\n     * @param _prevId Id of previous node for the insert position\\r\\n     * @param _nextId Id of next node for the insert position\\r\\n     */\\r\\n    function insert(\\r\\n        address _id,\\r\\n        uint256 _ICR,\\r\\n        address _prevId,\\r\\n        address _nextId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a node from the list\\r\\n     * @param _id Node's id\\r\\n     */\\r\\n    function remove(address _id) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Re-insert the node at a new position, based on its new NICR\\r\\n     * @param _id Node's id\\r\\n     * @param _newICR Node's new NICR\\r\\n     * @param _prevId Id of previous node for the new insert position\\r\\n     * @param _nextId Id of next node for the new insert position\\r\\n     */\\r\\n    function reInsert(\\r\\n        address _id,\\r\\n        uint256 _newICR,\\r\\n        address _prevId,\\r\\n        address _nextId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if the list contains a node\\r\\n     * @param _id Node's id\\r\\n     * @return true if list contains a node with given id\\r\\n     */\\r\\n    function contains(address _id) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if the list is full\\r\\n     * @return true if list is full\\r\\n     */\\r\\n    function isFull() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if the list is empty\\r\\n     * @return true if list is empty\\r\\n     */\\r\\n    function isEmpty() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @return list current size\\r\\n     */\\r\\n    function getSize() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @return list max size\\r\\n     */\\r\\n    function getMaxSize() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @return the first node in the list (node with the largest NICR)\\r\\n     */\\r\\n    function getFirst() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @return the last node in the list (node with the smallest NICR)\\r\\n     */\\r\\n    function getLast() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @param _id Node's id\\r\\n     * @return the next node (with a smaller NICR) in the list for a given node\\r\\n     */\\r\\n    function getNext(address _id) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @param _id Node's id\\r\\n     * @return the previous node (with a larger NICR) in the list for a given node\\r\\n     */\\r\\n    function getPrev(address _id) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Check if a pair of nodes is a valid insertion point for a new node with the given NICR\\r\\n     * @param _ICR Node's NICR\\r\\n     * @param _prevId Id of previous node for the insert position\\r\\n     * @param _nextId Id of next node for the insert position\\r\\n     */\\r\\n    function validInsertPosition(\\r\\n        uint256 _ICR,\\r\\n        address _prevId,\\r\\n        address _nextId\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Find the insert position for a new node with the given NICR\\r\\n     * @param _ICR Node's NICR\\r\\n     * @param _prevId Id of previous node for the insert position\\r\\n     * @param _nextId Id of next node for the insert position\\r\\n     */\\r\\n    function findInsertPosition(\\r\\n        uint256 _ICR,\\r\\n        address _prevId,\\r\\n        address _nextId\\r\\n    ) external view returns (address, address);\\r\\n}\\r\\n\\r\\n/// Common interface for Fee Distributor.\\r\\ninterface IFeeDistributor {\\r\\n    // --- Events ---\\r\\n\\r\\n    event FeeSharingCollectorAddressChanged(address _feeSharingCollectorAddress);\\r\\n    event ZeroStakingAddressChanged(address _zeroStakingAddress);\\r\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\r\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\r\\n    event WrbtcAddressChanged(address _wrbtcAddress);\\r\\n    event ZUSDTokenAddressChanged(address _zusdTokenAddress);\\r\\n    event ActivePoolAddressSet(address _activePoolAddress);\\r\\n\\r\\n    event ZUSDDistributed(uint256 _zusdDistributedAmount);\\r\\n    event RBTCistributed(uint256 _rbtcDistributedAmount);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    /**\\r\\n     * @notice Called only once on init, to set addresses of other Zero contracts. Callable only by owner\\r\\n     * @dev initializer function, checks addresses are contracts\\r\\n     * @param _feeSharingCollectorAddress FeeSharingCollector address\\r\\n     * @param _zeroStakingAddress ZEROStaking contract address\\r\\n     * @param _borrowerOperationsAddress borrowerOperations contract address\\r\\n     * @param _troveManagerAddress TroveManager contract address\\r\\n     * @param _wrbtcAddress wrbtc ERC20 contract address\\r\\n     * @param _zusdTokenAddress ZUSDToken contract address\\r\\n     * @param _activePoolAddress ActivePool contract address\\r\\n     */\\r\\n    function setAddresses(\\r\\n        address _feeSharingCollectorAddress,\\r\\n        address _zeroStakingAddress,\\r\\n        address _borrowerOperationsAddress,\\r\\n        address _troveManagerAddress,\\r\\n        address _wrbtcAddress,\\r\\n        address _zusdTokenAddress,\\r\\n        address _activePoolAddress\\r\\n    ) external;\\r\\n\\r\\n    function distributeFees() external;\\r\\n}\\r\\n\\r\\ncontract BaseMath {\\r\\n    uint constant public DECIMAL_PRECISION = 1e18;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Based on OpenZeppelin's SafeMath:\\r\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\r\\n *\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n// Buidler's helper contract for console logging\\r\\nlibrary console {\\r\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\r\\n\\r\\n\\tfunction log() internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log()\\\"));\\r\\n\\t\\tignored;\\r\\n\\t}\\tfunction logInt(int p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logUint(uint p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logString(string memory p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBool(bool p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logAddress(address p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes(bytes memory p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logByte(byte p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes1(bytes1 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes2(bytes2 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes3(bytes3 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes4(bytes4 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes5(bytes5 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes6(bytes6 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes7(bytes7 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes8(bytes8 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes9(bytes9 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes10(bytes10 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes11(bytes11 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes12(bytes12 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes13(bytes13 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes14(bytes14 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes15(bytes15 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes16(bytes16 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes17(bytes17 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes18(bytes18 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes19(bytes19 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes20(bytes20 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes21(bytes21 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes22(bytes22 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes23(bytes23 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes24(bytes24 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes25(bytes25 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes26(bytes26 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes27(bytes27 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes28(bytes28 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes29(bytes29 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes30(bytes30 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes31(bytes31 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction logBytes32(bytes32 p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, address p2) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\r\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\r\\n\\t\\tignored;\\r\\n\\t}\\r\\n\\r\\n}\\r\\n\\r\\nlibrary LiquityMath {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\r\\n\\r\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\r\\n     *\\r\\n     * - Making it “too high” could lead to overflows.\\r\\n     * - Making it “too low” could lead to an ICR equal to zero, due to truncation from Solidity floor division. \\r\\n     *\\r\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\r\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\r\\n     *\\r\\n     */\\r\\n    uint internal constant NICR_PRECISION = 1e20;\\r\\n\\r\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\r\\n        return (_a < _b) ? _a : _b;\\r\\n    }\\r\\n\\r\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\r\\n        return (_a >= _b) ? _a : _b;\\r\\n    }\\r\\n\\r\\n    /* \\r\\n    * Multiply two decimal numbers and use normal rounding rules:\\r\\n    * -round product up if 19'th mantissa digit >= 5\\r\\n    * -round product down if 19'th mantissa digit < 5\\r\\n    *\\r\\n    * Used only inside the exponentiation, _decPow().\\r\\n    */\\r\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\r\\n        uint prod_xy = x.mul(y);\\r\\n\\r\\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\r\\n    }\\r\\n\\r\\n    /* \\r\\n    * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\r\\n    * \\r\\n    * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity. \\r\\n    * \\r\\n    * Called by two functions that represent time in units of minutes:\\r\\n    * 1) TroveManager._calcDecayedBaseRate\\r\\n    * 2) CommunityIssuance._getCumulativeIssuanceFraction \\r\\n    * \\r\\n    * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\r\\n    * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\r\\n    * \\r\\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\r\\n    * negligibly different from just passing the cap, since: \\r\\n    *\\r\\n    * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\r\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\r\\n    */\\r\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\r\\n       \\r\\n        if (_minutes > 525600000) {_minutes = 525600000;}  // cap to avoid overflow\\r\\n    \\r\\n        if (_minutes == 0) {return DECIMAL_PRECISION;}\\r\\n\\r\\n        uint y = DECIMAL_PRECISION;\\r\\n        uint x = _base;\\r\\n        uint n = _minutes;\\r\\n\\r\\n        // Exponentiation-by-squaring\\r\\n        while (n > 1) {\\r\\n            if (n % 2 == 0) {\\r\\n                x = decMul(x, x);\\r\\n                n = n.div(2);\\r\\n            } else { // if (n % 2 != 0)\\r\\n                y = decMul(x, y);\\r\\n                x = decMul(x, x);\\r\\n                n = (n.sub(1)).div(2);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return decMul(x, y);\\r\\n  }\\r\\n\\r\\n    function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\r\\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\r\\n    }\\r\\n\\r\\n    function _computeNominalCR(uint _coll, uint _debt) internal pure returns (uint) {\\r\\n        if (_debt > 0) {\\r\\n            return _coll.mul(NICR_PRECISION).div(_debt);\\r\\n        }\\r\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\r\\n        else { // if (_debt == 0)\\r\\n            return 2**256 - 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _computeCR(uint _coll, uint _debt, uint _price) internal pure returns (uint) {\\r\\n        if (_debt > 0) {\\r\\n            uint newCollRatio = _coll.mul(_price).div(_debt);\\r\\n\\r\\n            return newCollRatio;\\r\\n        }\\r\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\r\\n        else { // if (_debt == 0)\\r\\n            return 2**256 - 1; \\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// Common interface for the Pools.\\r\\ninterface IPool {\\r\\n    // --- Events ---\\r\\n\\r\\n    event ETHBalanceUpdated(uint _newBalance);\\r\\n    event ZUSDBalanceUpdated(uint _newBalance);\\r\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\r\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\r\\n    event EtherSent(address _to, uint _amount);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    /// @notice Not necessarily equal to the raw ether balance - ether can be forcibly sent to contracts.\\r\\n    /// @return ETH pool balance\\r\\n    function getETH() external view returns (uint);\\r\\n\\r\\n    /// @return ZUSD debt pool balance\\r\\n    function getZUSDDebt() external view returns (uint);\\r\\n\\r\\n    /// @notice Increases ZUSD debt of the pool.\\r\\n    /// @param _amount ZUSD amount to add to the pool debt\\r\\n    function increaseZUSDDebt(uint _amount) external;\\r\\n\\r\\n    /// @notice Decreases ZUSD debt of the pool.\\r\\n    /// @param _amount ZUSD amount to subtract to the pool debt\\r\\n    function decreaseZUSDDebt(uint _amount) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The Active Pool holds the ETH collateral and ZUSD debt (but not ZUSD tokens) for all active troves.\\r\\n *\\r\\n * When a trove is liquidated, it's ETH and ZUSD debt are transferred from the Active Pool, to either the\\r\\n * Stability Pool, the Default Pool, or both, depending on the liquidation conditions.\\r\\n *\\r\\n */\\r\\ninterface IActivePool is IPool {\\r\\n    // --- Events ---\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event ActivePoolZUSDDebtUpdated(uint _ZUSDDebt);\\r\\n    event ActivePoolETHBalanceUpdated(uint _ETH);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    /// @notice Send ETH amount to given account. Updates ActivePool balance. Only callable by BorrowerOperations, TroveManager or StabilityPool.\\r\\n    /// @param _account account to receive the ETH amount\\r\\n    /// @param _amount ETH amount to send\\r\\n    function sendETH(address _account, uint _amount) external;\\r\\n}\\r\\n\\r\\ninterface IDefaultPool is IPool {\\r\\n    // --- Events ---\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event DefaultPoolZUSDDebtUpdated(uint256 _ZUSDDebt);\\r\\n    event DefaultPoolETHBalanceUpdated(uint256 _ETH);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    /// @notice Send ETH to Active Pool\\r\\n    /// @param _amount ETH to send\\r\\n    function sendETHToActivePool(uint256 _amount) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\r\\n * common functions.\\r\\n */\\r\\ncontract LiquityBase is BaseMath, ILiquityBase {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public constant _100pct = 1000000000000000000; // 1e18 == 100%\\r\\n\\r\\n    /// Amount of ZUSD to be locked in gas pool on opening troves\\r\\n    uint256 public constant ZUSD_GAS_COMPENSATION = 20e18;\\r\\n\\r\\n    /// Minimum amount of net ZUSD debt a trove must have\\r\\n    uint256 public constant MIN_NET_DEBT = 180e18;\\r\\n\\r\\n    IActivePool public activePool;\\r\\n\\r\\n    IDefaultPool public defaultPool;\\r\\n\\r\\n    IPriceFeed public override priceFeed;\\r\\n\\r\\n    ILiquityBaseParams public override liquityBaseParams;\\r\\n\\r\\n    // --- Gas compensation functions ---\\r\\n\\r\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\r\\n    function _getCompositeDebt(uint256 _debt) internal pure returns (uint256) {\\r\\n        return _debt.add(ZUSD_GAS_COMPENSATION);\\r\\n    }\\r\\n\\r\\n    function _getNetDebt(uint256 _debt) internal pure returns (uint256) {\\r\\n        return _debt.sub(ZUSD_GAS_COMPENSATION);\\r\\n    }\\r\\n\\r\\n    /// Return the amount of ETH to be drawn from a trove's collateral and sent as gas compensation.\\r\\n    function _getCollGasCompensation(uint256 _entireColl) internal view returns (uint256) {\\r\\n        return _entireColl / liquityBaseParams.PERCENT_DIVISOR();\\r\\n    }\\r\\n\\r\\n    function getEntireSystemColl() public view returns (uint256 entireSystemColl) {\\r\\n        uint256 activeColl = activePool.getETH();\\r\\n        uint256 liquidatedColl = defaultPool.getETH();\\r\\n\\r\\n        return activeColl.add(liquidatedColl);\\r\\n    }\\r\\n\\r\\n    function getEntireSystemDebt() public view returns (uint256 entireSystemDebt) {\\r\\n        uint256 activeDebt = activePool.getZUSDDebt();\\r\\n        uint256 closedDebt = defaultPool.getZUSDDebt();\\r\\n\\r\\n        return activeDebt.add(closedDebt);\\r\\n    }\\r\\n\\r\\n    function _getTCR(uint256 _price) internal view returns (uint256 TCR) {\\r\\n        uint256 entireSystemColl = getEntireSystemColl();\\r\\n        uint256 entireSystemDebt = getEntireSystemDebt();\\r\\n\\r\\n        TCR = LiquityMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\r\\n\\r\\n        return TCR;\\r\\n    }\\r\\n\\r\\n    function _checkRecoveryMode(uint256 _price) internal view returns (bool) {\\r\\n        uint256 TCR = _getTCR(_price);\\r\\n\\r\\n        return TCR < liquityBaseParams.CCR();\\r\\n    }\\r\\n\\r\\n    function _requireUserAcceptsFee(\\r\\n        uint256 _fee,\\r\\n        uint256 _amount,\\r\\n        uint256 _maxFeePercentage\\r\\n    ) internal pure {\\r\\n        uint256 feePercentage = _fee.mul(DECIMAL_PRECISION).div(_amount);\\r\\n        require(feePercentage <= _maxFeePercentage, \\\"Fee exceeded provided maximum\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract CheckContract {\\r\\n    /**\\r\\n     * @dev Check that the account is an already deployed non-destroyed contract.\\r\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\r\\n     */\\r\\n    function checkContract(address _account) internal view {\\r\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(_account) }\\r\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Based on OpenZeppelin's Ownable contract:\\r\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\r\\n *\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable {\\r\\n    bytes32 private constant KEY_OWNER = keccak256(\\\"key.ownable.owner\\\");\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        _setOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == getOwner(), \\\"Ownable:: access denied\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set address of the owner.\\r\\n     * @param _owner Address of the owner.\\r\\n     * */\\r\\n    function _setOwner(address _owner) internal {\\r\\n        require(_owner != address(0), \\\"Ownable::setOwner: invalid address\\\");\\r\\n        emit OwnershipTransferred(getOwner(), _owner);\\r\\n\\r\\n        bytes32 key = KEY_OWNER;\\r\\n        assembly {\\r\\n            sstore(key, _owner)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set address of the owner (only owner can call this function)\\r\\n     * @param _owner Address of the owner.\\r\\n     * */\\r\\n    function setOwner(address _owner) public onlyOwner {\\r\\n        _setOwner(_owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return address of the owner.\\r\\n     * @return _owner Address of the owner.\\r\\n     * */\\r\\n    function getOwner() public view returns (address _owner) {\\r\\n        bytes32 key = KEY_OWNER;\\r\\n        assembly {\\r\\n            _owner := sload(key)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TroveManagerStorage is Ownable, BaseMath {\\r\\n    string public constant NAME = \\\"TroveManager\\\";\\r\\n\\r\\n    // --- Connected contract declarations ---\\r\\n\\r\\n    address public troveManagerRedeemOps;\\r\\n\\r\\n    address public borrowerOperationsAddress;\\r\\n\\r\\n    IStabilityPool public _stabilityPool;\\r\\n\\r\\n    address gasPoolAddress;\\r\\n\\r\\n    ICollSurplusPool collSurplusPool;\\r\\n\\r\\n    IZUSDToken public _zusdToken;\\r\\n\\r\\n    IZEROToken public _zeroToken;\\r\\n\\r\\n    IZEROStaking public _zeroStaking;\\r\\n\\r\\n    IFeeDistributor public feeDistributor;\\r\\n\\r\\n    // A doubly linked list of Troves, sorted by their sorted by their collateral ratios\\r\\n    ISortedTroves public sortedTroves;\\r\\n\\r\\n    // --- Data structures ---\\r\\n\\r\\n    uint256 public baseRate;\\r\\n\\r\\n    // The timestamp of the latest fee operation (redemption or new ZUSD issuance)\\r\\n    uint256 public lastFeeOperationTime;\\r\\n\\r\\n    enum Status {\\r\\n        nonExistent,\\r\\n        active,\\r\\n        closedByOwner,\\r\\n        closedByLiquidation,\\r\\n        closedByRedemption\\r\\n    }\\r\\n\\r\\n    // Store the necessary data for a trove\\r\\n    struct Trove {\\r\\n        uint256 debt;\\r\\n        uint256 coll;\\r\\n        uint256 stake;\\r\\n        Status status;\\r\\n        uint128 arrayIndex;\\r\\n    }\\r\\n\\r\\n    mapping(address => Trove) public Troves;\\r\\n\\r\\n    uint256 public totalStakes;\\r\\n\\r\\n    // Snapshot of the value of totalStakes, taken immediately after the latest liquidation\\r\\n    uint256 public totalStakesSnapshot;\\r\\n\\r\\n    // Snapshot of the total collateral across the ActivePool and DefaultPool, immediately after the latest liquidation.\\r\\n    uint256 public totalCollateralSnapshot;\\r\\n\\r\\n    /*\\r\\n     * L_ETH and L_ZUSDDebt track the sums of accumulated liquidation rewards per unit staked. During its lifetime, each stake earns:\\r\\n     *\\r\\n     * An ETH gain of ( stake * [L_ETH - L_ETH(0)] )\\r\\n     * A ZUSDDebt increase  of ( stake * [L_ZUSDDebt - L_ZUSDDebt(0)] )\\r\\n     *\\r\\n     * Where L_ETH(0) and L_ZUSDDebt(0) are snapshots of L_ETH and L_ZUSDDebt for the active Trove taken at the instant the stake was made\\r\\n     */\\r\\n    uint256 public L_ETH;\\r\\n    uint256 public L_ZUSDDebt;\\r\\n\\r\\n    // Map addresses with active troves to their RewardSnapshot\\r\\n    mapping(address => RewardSnapshot) public rewardSnapshots;\\r\\n\\r\\n    // Object containing the ETH and ZUSD snapshots for a given active trove\\r\\n    struct RewardSnapshot {\\r\\n        uint256 ETH;\\r\\n        uint256 ZUSDDebt;\\r\\n    }\\r\\n\\r\\n    // Array of all active trove addresses - used to to compute an approximate hint off-chain, for the sorted list insertion\\r\\n    address[] public TroveOwners;\\r\\n\\r\\n    // Error trackers for the trove redistribution calculation\\r\\n    uint256 public lastETHError_Redistribution;\\r\\n    uint256 public lastZUSDDebtError_Redistribution;\\r\\n}\\r\\n\\r\\ncontract TroveManagerBase is LiquityBase, TroveManagerStorage {\\r\\n    uint256 public constant SECONDS_IN_ONE_MINUTE = 60;\\r\\n\\r\\n    uint256 public constant MINUTE_DECAY_FACTOR = 999037758833783000;\\r\\n\\r\\n    /// During bootsrap period redemptions are not allowed\\r\\n    uint256 public immutable BOOTSTRAP_PERIOD;\\r\\n\\r\\n    /**\\r\\n      BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption.\\r\\n      Corresponds to (1 / ALPHA) in the white paper.\\r\\n     */\\r\\n    uint256 public constant BETA = 2;\\r\\n\\r\\n    /**\\r\\n      --- Variable container structs for liquidations ---\\r\\n     \\r\\n      These structs are used to hold, return and assign variables inside the liquidation functions,\\r\\n      in order to avoid the error: \\\"CompilerError: Stack too deep\\\".\\r\\n     */\\r\\n\\r\\n    struct LocalVariables_OuterLiquidationFunction {\\r\\n        uint256 price;\\r\\n        uint256 ZUSDInStabPool;\\r\\n        bool recoveryModeAtStart;\\r\\n        uint256 liquidatedDebt;\\r\\n        uint256 liquidatedColl;\\r\\n    }\\r\\n\\r\\n    struct LocalVariables_InnerSingleLiquidateFunction {\\r\\n        uint256 collToLiquidate;\\r\\n        uint256 pendingDebtReward;\\r\\n        uint256 pendingCollReward;\\r\\n    }\\r\\n\\r\\n    struct LocalVariables_LiquidationSequence {\\r\\n        uint256 remainingZUSDInStabPool;\\r\\n        uint256 i;\\r\\n        uint256 ICR;\\r\\n        address user;\\r\\n        bool backToNormalMode;\\r\\n        uint256 entireSystemDebt;\\r\\n        uint256 entireSystemColl;\\r\\n    }\\r\\n\\r\\n    struct LiquidationValues {\\r\\n        uint256 entireTroveDebt;\\r\\n        uint256 entireTroveColl;\\r\\n        uint256 collGasCompensation;\\r\\n        uint256 ZUSDGasCompensation;\\r\\n        uint256 debtToOffset;\\r\\n        uint256 collToSendToSP;\\r\\n        uint256 debtToRedistribute;\\r\\n        uint256 collToRedistribute;\\r\\n        uint256 collSurplus;\\r\\n    }\\r\\n\\r\\n    struct LiquidationTotals {\\r\\n        uint256 totalCollInSequence;\\r\\n        uint256 totalDebtInSequence;\\r\\n        uint256 totalCollGasCompensation;\\r\\n        uint256 totalZUSDGasCompensation;\\r\\n        uint256 totalDebtToOffset;\\r\\n        uint256 totalCollToSendToSP;\\r\\n        uint256 totalDebtToRedistribute;\\r\\n        uint256 totalCollToRedistribute;\\r\\n        uint256 totalCollSurplus;\\r\\n    }\\r\\n\\r\\n    struct ContractsCache {\\r\\n        IActivePool activePool;\\r\\n        IDefaultPool defaultPool;\\r\\n        IZUSDToken zusdToken;\\r\\n        IZEROStaking zeroStaking;\\r\\n        ISortedTroves sortedTroves;\\r\\n        ICollSurplusPool collSurplusPool;\\r\\n        address gasPoolAddress;\\r\\n    }\\r\\n    // --- Variable container structs for redemptions ---\\r\\n\\r\\n    struct RedemptionTotals {\\r\\n        uint256 remainingZUSD;\\r\\n        uint256 totalZUSDToRedeem;\\r\\n        uint256 totalETHDrawn;\\r\\n        uint256 ETHFee;\\r\\n        uint256 ETHToSendToRedeemer;\\r\\n        uint256 decayedBaseRate;\\r\\n        uint256 price;\\r\\n        uint256 totalZUSDSupplyAtStart;\\r\\n    }\\r\\n\\r\\n    struct SingleRedemptionValues {\\r\\n        uint256 ZUSDLot;\\r\\n        uint256 ETHLot;\\r\\n        bool cancelledPartial;\\r\\n    }\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event Liquidation(\\r\\n        uint256 _liquidatedDebt,\\r\\n        uint256 _liquidatedColl,\\r\\n        uint256 _collGasCompensation,\\r\\n        uint256 _ZUSDGasCompensation\\r\\n    );\\r\\n    event Redemption(\\r\\n        uint256 _attemptedZUSDAmount,\\r\\n        uint256 _actualZUSDAmount,\\r\\n        uint256 _ETHSent,\\r\\n        uint256 _ETHFee\\r\\n    );\\r\\n    event TroveUpdated(\\r\\n        address indexed _borrower,\\r\\n        uint256 _debt,\\r\\n        uint256 _coll,\\r\\n        uint256 _stake,\\r\\n        TroveManagerOperation _operation\\r\\n    );\\r\\n    event TroveLiquidated(\\r\\n        address indexed _borrower,\\r\\n        uint256 _debt,\\r\\n        uint256 _coll,\\r\\n        TroveManagerOperation _operation\\r\\n    );\\r\\n    event BaseRateUpdated(uint256 _baseRate);\\r\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\r\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\r\\n    event SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\r\\n    event LTermsUpdated(uint256 _L_ETH, uint256 _L_ZUSDDebt);\\r\\n    event TroveSnapshotsUpdated(uint256 _L_ETH, uint256 _L_ZUSDDebt);\\r\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\r\\n\\r\\n    enum TroveManagerOperation {\\r\\n        applyPendingRewards,\\r\\n        liquidateInNormalMode,\\r\\n        liquidateInRecoveryMode,\\r\\n        redeemCollateral\\r\\n    }\\r\\n\\r\\n    constructor(uint256 _bootstrapPeriod) public {\\r\\n        BOOTSTRAP_PERIOD = _bootstrapPeriod;\\r\\n    }\\r\\n\\r\\n    /// Return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\r\\n    function _getCurrentICR(address _borrower, uint256 _price) public view returns (uint256) {\\r\\n        (uint256 currentETH, uint256 currentZUSDDebt) = _getCurrentTroveAmounts(_borrower);\\r\\n\\r\\n        uint256 ICR = LiquityMath._computeCR(currentETH, currentZUSDDebt, _price);\\r\\n        return ICR;\\r\\n    }\\r\\n\\r\\n    function _getCurrentTroveAmounts(address _borrower) internal view returns (uint256, uint256) {\\r\\n        uint256 pendingETHReward = _getPendingETHReward(_borrower);\\r\\n        uint256 pendingZUSDDebtReward = _getPendingZUSDDebtReward(_borrower);\\r\\n\\r\\n        uint256 currentETH = Troves[_borrower].coll.add(pendingETHReward);\\r\\n        uint256 currentZUSDDebt = Troves[_borrower].debt.add(pendingZUSDDebtReward);\\r\\n\\r\\n        return (currentETH, currentZUSDDebt);\\r\\n    }\\r\\n\\r\\n    /// Get the borrower's pending accumulated ETH reward, earned by their stake\\r\\n    function _getPendingETHReward(address _borrower) public view returns (uint256) {\\r\\n        uint256 snapshotETH = rewardSnapshots[_borrower].ETH;\\r\\n        uint256 rewardPerUnitStaked = L_ETH.sub(snapshotETH);\\r\\n\\r\\n        if (rewardPerUnitStaked == 0 || Troves[_borrower].status != Status.active) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 stake = Troves[_borrower].stake;\\r\\n\\r\\n        uint256 pendingETHReward = stake.mul(rewardPerUnitStaked).div(DECIMAL_PRECISION);\\r\\n\\r\\n        return pendingETHReward;\\r\\n    }\\r\\n\\r\\n    /// Get the borrower's pending accumulated ZUSD reward, earned by their stake\\r\\n    function _getPendingZUSDDebtReward(address _borrower) public view returns (uint256) {\\r\\n        uint256 snapshotZUSDDebt = rewardSnapshots[_borrower].ZUSDDebt;\\r\\n        uint256 rewardPerUnitStaked = L_ZUSDDebt.sub(snapshotZUSDDebt);\\r\\n\\r\\n        if (rewardPerUnitStaked == 0 || Troves[_borrower].status != Status.active) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 stake = Troves[_borrower].stake;\\r\\n\\r\\n        uint256 pendingZUSDDebtReward = stake.mul(rewardPerUnitStaked).div(DECIMAL_PRECISION);\\r\\n\\r\\n        return pendingZUSDDebtReward;\\r\\n    }\\r\\n\\r\\n    /// Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\r\\n    function _applyPendingRewards(\\r\\n        IActivePool _activePool,\\r\\n        IDefaultPool _defaultPool,\\r\\n        address _borrower\\r\\n    ) internal {\\r\\n        if (_hasPendingRewards(_borrower)) {\\r\\n            _requireTroveIsActive(_borrower);\\r\\n\\r\\n            // Compute pending rewards\\r\\n            uint256 pendingETHReward = _getPendingETHReward(_borrower);\\r\\n            uint256 pendingZUSDDebtReward = _getPendingZUSDDebtReward(_borrower);\\r\\n\\r\\n            // Apply pending rewards to trove's state\\r\\n            Troves[_borrower].coll = Troves[_borrower].coll.add(pendingETHReward);\\r\\n            Troves[_borrower].debt = Troves[_borrower].debt.add(pendingZUSDDebtReward);\\r\\n\\r\\n            _updateTroveRewardSnapshots(_borrower);\\r\\n\\r\\n            // Transfer from DefaultPool to ActivePool\\r\\n            _movePendingTroveRewardsToActivePool(\\r\\n                _activePool,\\r\\n                _defaultPool,\\r\\n                pendingZUSDDebtReward,\\r\\n                pendingETHReward\\r\\n            );\\r\\n\\r\\n            emit TroveUpdated(\\r\\n                _borrower,\\r\\n                Troves[_borrower].debt,\\r\\n                Troves[_borrower].coll,\\r\\n                Troves[_borrower].stake,\\r\\n                TroveManagerOperation.applyPendingRewards\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _hasPendingRewards(address _borrower) public view returns (bool) {\\r\\n        /*\\r\\n         * A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\r\\n         * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\r\\n         * pending rewards\\r\\n         */\\r\\n        if (Troves[_borrower].status != Status.active) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        return (rewardSnapshots[_borrower].ETH < L_ETH);\\r\\n    }\\r\\n\\r\\n    function _updateTroveRewardSnapshots(address _borrower) internal {\\r\\n        rewardSnapshots[_borrower].ETH = L_ETH;\\r\\n        rewardSnapshots[_borrower].ZUSDDebt = L_ZUSDDebt;\\r\\n        emit TroveSnapshotsUpdated(L_ETH, L_ZUSDDebt);\\r\\n    }\\r\\n\\r\\n    /// Move a Trove's pending debt and collateral rewards from distributions, from the Default Pool to the Active Pool\\r\\n    function _movePendingTroveRewardsToActivePool(\\r\\n        IActivePool _activePool,\\r\\n        IDefaultPool _defaultPool,\\r\\n        uint256 _ZUSD,\\r\\n        uint256 _ETH\\r\\n    ) internal {\\r\\n        _defaultPool.decreaseZUSDDebt(_ZUSD);\\r\\n        _activePool.increaseZUSDDebt(_ZUSD);\\r\\n        _defaultPool.sendETHToActivePool(_ETH);\\r\\n    }\\r\\n\\r\\n    /// Remove borrower's stake from the totalStakes sum, and set their stake to 0\\r\\n    function _removeStake(address _borrower) internal {\\r\\n        uint256 stake = Troves[_borrower].stake;\\r\\n        totalStakes = totalStakes.sub(stake);\\r\\n        Troves[_borrower].stake = 0;\\r\\n    }\\r\\n\\r\\n    function _closeTrove(address _borrower, Status closedStatus) internal {\\r\\n        assert(closedStatus != Status.nonExistent && closedStatus != Status.active);\\r\\n\\r\\n        uint256 TroveOwnersArrayLength = TroveOwners.length;\\r\\n        _requireMoreThanOneTroveInSystem(TroveOwnersArrayLength);\\r\\n\\r\\n        Troves[_borrower].status = closedStatus;\\r\\n        Troves[_borrower].coll = 0;\\r\\n        Troves[_borrower].debt = 0;\\r\\n\\r\\n        rewardSnapshots[_borrower].ETH = 0;\\r\\n        rewardSnapshots[_borrower].ZUSDDebt = 0;\\r\\n\\r\\n        _removeTroveOwner(_borrower, TroveOwnersArrayLength);\\r\\n        sortedTroves.remove(_borrower);\\r\\n    }\\r\\n\\r\\n    /// Update borrower's stake based on their latest collateral value\\r\\n    function _updateStakeAndTotalStakes(address _borrower) internal returns (uint256) {\\r\\n        uint256 newStake = _computeNewStake(Troves[_borrower].coll);\\r\\n        uint256 oldStake = Troves[_borrower].stake;\\r\\n        Troves[_borrower].stake = newStake;\\r\\n\\r\\n        totalStakes = totalStakes.sub(oldStake).add(newStake);\\r\\n        emit TotalStakesUpdated(totalStakes);\\r\\n\\r\\n        return newStake;\\r\\n    }\\r\\n\\r\\n    // Calculate a new stake based on the snapshots of the totalStakes and totalCollateral taken at the last liquidation\\r\\n    function _computeNewStake(uint256 _coll) internal view returns (uint256) {\\r\\n        uint256 stake;\\r\\n        if (totalCollateralSnapshot == 0) {\\r\\n            stake = _coll;\\r\\n        } else {\\r\\n            /*\\r\\n             * The following assert() holds true because:\\r\\n             * - The system always contains >= 1 trove\\r\\n             * - When we close or liquidate a trove, we redistribute the pending rewards, so if all troves were closed/liquidated,\\r\\n             * rewards would’ve been emptied and totalCollateralSnapshot would be zero too.\\r\\n             */\\r\\n            assert(totalStakesSnapshot > 0);\\r\\n            stake = _coll.mul(totalStakesSnapshot).div(totalCollateralSnapshot);\\r\\n        }\\r\\n        return stake;\\r\\n    }\\r\\n\\r\\n    function _calcDecayedBaseRate() internal view returns (uint256) {\\r\\n        uint256 minutesPassed = _minutesPassedSinceLastFeeOp();\\r\\n        uint256 decayFactor = LiquityMath._decPow(MINUTE_DECAY_FACTOR, minutesPassed);\\r\\n\\r\\n        return baseRate.mul(decayFactor).div(DECIMAL_PRECISION);\\r\\n    }\\r\\n\\r\\n    function _minutesPassedSinceLastFeeOp() internal view returns (uint256) {\\r\\n        return (block.timestamp.sub(lastFeeOperationTime)).div(SECONDS_IN_ONE_MINUTE);\\r\\n    }\\r\\n\\r\\n    // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\r\\n    function _updateLastFeeOpTime() internal {\\r\\n        uint256 timePassed = block.timestamp.sub(lastFeeOperationTime);\\r\\n\\r\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\r\\n            lastFeeOperationTime = block.timestamp;\\r\\n            emit LastFeeOpTimeUpdated(block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calcRedemptionFee(\\r\\n        uint256 _redemptionRate,\\r\\n        uint256 _ETHDrawn\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 redemptionFee = _redemptionRate.mul(_ETHDrawn).div(DECIMAL_PRECISION);\\r\\n        require(\\r\\n            redemptionFee < _ETHDrawn,\\r\\n            \\\"TroveManager: Fee would eat up all returned collateral\\\"\\r\\n        );\\r\\n        return redemptionFee;\\r\\n    }\\r\\n\\r\\n    function _getRedemptionRate() public view returns (uint256) {\\r\\n        return _calcRedemptionRate(baseRate);\\r\\n    }\\r\\n\\r\\n    function _getRedemptionFee(uint256 _ETHDrawn) internal view returns (uint256) {\\r\\n        return _calcRedemptionFee(_getRedemptionRate(), _ETHDrawn);\\r\\n    }\\r\\n\\r\\n    function _calcRedemptionRate(uint256 _baseRate) internal view returns (uint256) {\\r\\n        return\\r\\n            LiquityMath._min(\\r\\n                liquityBaseParams.REDEMPTION_FEE_FLOOR().add(_baseRate),\\r\\n                DECIMAL_PRECISION // cap at a maximum of 100%\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      Remove a Trove owner from the TroveOwners array, not preserving array order. Removing owner 'B' does the following:\\r\\n      [A B C D E] => [A E C D], and updates E's Trove struct to point to its new array index.\\r\\n     */\\r\\n    function _removeTroveOwner(address _borrower, uint256 TroveOwnersArrayLength) internal {\\r\\n        Status troveStatus = Troves[_borrower].status;\\r\\n        // It’s set in caller function `_closeTrove`\\r\\n        assert(troveStatus != Status.nonExistent && troveStatus != Status.active);\\r\\n\\r\\n        uint128 index = Troves[_borrower].arrayIndex;\\r\\n        uint256 length = TroveOwnersArrayLength;\\r\\n        uint256 idxLast = length.sub(1);\\r\\n\\r\\n        assert(index <= idxLast);\\r\\n\\r\\n        address addressToMove = TroveOwners[idxLast];\\r\\n\\r\\n        TroveOwners[index] = addressToMove;\\r\\n        Troves[addressToMove].arrayIndex = index;\\r\\n        emit TroveIndexUpdated(addressToMove, index);\\r\\n\\r\\n        TroveOwners.pop();\\r\\n    }\\r\\n\\r\\n    // --- 'require' wrapper functions ---\\r\\n\\r\\n    function _requireCallerIsBorrowerOperations() internal view {\\r\\n        require(\\r\\n            msg.sender == borrowerOperationsAddress,\\r\\n            \\\"TroveManager: Caller is not the BorrowerOperations contract\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _requireTroveIsActive(address _borrower) internal view {\\r\\n        require(\\r\\n            Troves[_borrower].status == Status.active,\\r\\n            \\\"TroveManager: Trove does not exist or is closed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _requireZUSDBalanceCoversRedemption(\\r\\n        IZUSDToken _zusdToken,\\r\\n        address _redeemer,\\r\\n        uint256 _amount\\r\\n    ) internal view {\\r\\n        require(\\r\\n            _zusdToken.balanceOf(_redeemer) >= _amount,\\r\\n            \\\"TroveManager: Requested redemption amount must be <= user's ZUSD token balance\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _requireMoreThanOneTroveInSystem(uint256 TroveOwnersArrayLength) internal view {\\r\\n        require(\\r\\n            TroveOwnersArrayLength > 1 && sortedTroves.getSize() > 1,\\r\\n            \\\"TroveManager: Only one trove in the system\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _requireAmountGreaterThanZero(uint256 _amount) internal pure {\\r\\n        require(_amount > 0, \\\"TroveManager: Amount must be greater than zero\\\");\\r\\n    }\\r\\n\\r\\n    function _requireTCRoverMCR(uint256 _price) internal view {\\r\\n        require(\\r\\n            _getTCR(_price) >= liquityBaseParams.MCR(),\\r\\n            \\\"TroveManager: Cannot redeem when TCR < MCR\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _requireAfterBootstrapPeriod() internal view {\\r\\n        uint256 systemDeploymentTime = _zeroToken.getDeploymentStartTime();\\r\\n        require(\\r\\n            block.timestamp >= systemDeploymentTime.add(BOOTSTRAP_PERIOD),\\r\\n            \\\"TroveManager: Redemptions are not allowed during bootstrap phase\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _requireValidMaxFeePercentage(uint256 _maxFeePercentage) internal view {\\r\\n        require(\\r\\n            _maxFeePercentage >= liquityBaseParams.REDEMPTION_FEE_FLOOR() &&\\r\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\r\\n            \\\"Max fee percentage must be between 0.5% and 100%\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TroveManager is TroveManagerBase, CheckContract, ITroveManager {\\r\\n    event FeeDistributorAddressChanged(address _feeDistributorAddress);\\r\\n    event TroveManagerRedeemOpsAddressChanged(address _troveManagerRedeemOps);\\r\\n    event LiquityBaseParamsAddressChanges(address _borrowerOperationsAddress);\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\r\\n    event ZUSDTokenAddressChanged(address _newZUSDTokenAddress);\\r\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\r\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\r\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\r\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\r\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\r\\n    event ZEROTokenAddressChanged(address _zeroTokenAddress);\\r\\n    event ZEROStakingAddressChanged(address _zeroStakingAddress);\\r\\n\\r\\n    ///@param _bootstrapPeriod During bootsrap period redemptions are not allowed\\r\\n    constructor(uint256 _bootstrapPeriod) public TroveManagerBase(_bootstrapPeriod) {}\\r\\n\\r\\n    // --- Dependency setter ---\\r\\n    function setAddresses(\\r\\n        TroveManagerInitAddressesParams memory _troveManagerInitAddressesParams\\r\\n    ) external override onlyOwner {\\r\\n        {\\r\\n            checkContract(_troveManagerInitAddressesParams._feeDistributorAddress);\\r\\n            checkContract(_troveManagerInitAddressesParams._troveManagerRedeemOps);\\r\\n            checkContract(_troveManagerInitAddressesParams._liquityBaseParamsAddress);\\r\\n            checkContract(_troveManagerInitAddressesParams._borrowerOperationsAddress);\\r\\n            checkContract(_troveManagerInitAddressesParams._activePoolAddress);\\r\\n            checkContract(_troveManagerInitAddressesParams._defaultPoolAddress);\\r\\n            checkContract(_troveManagerInitAddressesParams._stabilityPoolAddress);\\r\\n            checkContract(_troveManagerInitAddressesParams._gasPoolAddress);\\r\\n            checkContract(_troveManagerInitAddressesParams._collSurplusPoolAddress);\\r\\n            checkContract(_troveManagerInitAddressesParams._priceFeedAddress);\\r\\n            checkContract(_troveManagerInitAddressesParams._zusdTokenAddress);\\r\\n            checkContract(_troveManagerInitAddressesParams._sortedTrovesAddress);\\r\\n            checkContract(_troveManagerInitAddressesParams._zeroTokenAddress);\\r\\n            checkContract(_troveManagerInitAddressesParams._zeroStakingAddress);\\r\\n        }\\r\\n\\r\\n        feeDistributor = IFeeDistributor(_troveManagerInitAddressesParams._feeDistributorAddress);\\r\\n        troveManagerRedeemOps = _troveManagerInitAddressesParams._troveManagerRedeemOps;\\r\\n        liquityBaseParams = ILiquityBaseParams(\\r\\n            _troveManagerInitAddressesParams._liquityBaseParamsAddress\\r\\n        );\\r\\n        {\\r\\n            borrowerOperationsAddress = _troveManagerInitAddressesParams\\r\\n                ._borrowerOperationsAddress;\\r\\n            activePool = IActivePool(_troveManagerInitAddressesParams._activePoolAddress);\\r\\n            defaultPool = IDefaultPool(_troveManagerInitAddressesParams._defaultPoolAddress);\\r\\n            _stabilityPool = IStabilityPool(\\r\\n                _troveManagerInitAddressesParams._stabilityPoolAddress\\r\\n            );\\r\\n            gasPoolAddress = _troveManagerInitAddressesParams._gasPoolAddress;\\r\\n            collSurplusPool = ICollSurplusPool(\\r\\n                _troveManagerInitAddressesParams._collSurplusPoolAddress\\r\\n            );\\r\\n            priceFeed = IPriceFeed(_troveManagerInitAddressesParams._priceFeedAddress);\\r\\n            _zusdToken = IZUSDToken(_troveManagerInitAddressesParams._zusdTokenAddress);\\r\\n            sortedTroves = ISortedTroves(_troveManagerInitAddressesParams._sortedTrovesAddress);\\r\\n            _zeroToken = IZEROToken(_troveManagerInitAddressesParams._zeroTokenAddress);\\r\\n            _zeroStaking = IZEROStaking(_troveManagerInitAddressesParams._zeroStakingAddress);\\r\\n        }\\r\\n\\r\\n        emit FeeDistributorAddressChanged(_troveManagerInitAddressesParams._feeDistributorAddress);\\r\\n        emit TroveManagerRedeemOpsAddressChanged(\\r\\n            _troveManagerInitAddressesParams._troveManagerRedeemOps\\r\\n        );\\r\\n        emit LiquityBaseParamsAddressChanges(\\r\\n            _troveManagerInitAddressesParams._borrowerOperationsAddress\\r\\n        );\\r\\n        emit BorrowerOperationsAddressChanged(\\r\\n            _troveManagerInitAddressesParams._borrowerOperationsAddress\\r\\n        );\\r\\n        emit ActivePoolAddressChanged(_troveManagerInitAddressesParams._activePoolAddress);\\r\\n        emit DefaultPoolAddressChanged(_troveManagerInitAddressesParams._defaultPoolAddress);\\r\\n        emit StabilityPoolAddressChanged(_troveManagerInitAddressesParams._stabilityPoolAddress);\\r\\n        emit GasPoolAddressChanged(_troveManagerInitAddressesParams._gasPoolAddress);\\r\\n        emit CollSurplusPoolAddressChanged(\\r\\n            _troveManagerInitAddressesParams._collSurplusPoolAddress\\r\\n        );\\r\\n        emit PriceFeedAddressChanged(_troveManagerInitAddressesParams._priceFeedAddress);\\r\\n        emit ZUSDTokenAddressChanged(_troveManagerInitAddressesParams._zusdTokenAddress);\\r\\n        emit SortedTrovesAddressChanged(_troveManagerInitAddressesParams._sortedTrovesAddress);\\r\\n        emit ZEROTokenAddressChanged(_troveManagerInitAddressesParams._zeroTokenAddress);\\r\\n        emit ZEROStakingAddressChanged(_troveManagerInitAddressesParams._zeroStakingAddress);\\r\\n    }\\r\\n\\r\\n    function setTroveManagerRedeemOps(address _troveManagerRedeemOps) external override onlyOwner {\\r\\n        checkContract(_troveManagerRedeemOps);\\r\\n        troveManagerRedeemOps = _troveManagerRedeemOps;\\r\\n        emit TroveManagerRedeemOpsAddressChanged(_troveManagerRedeemOps);\\r\\n    }\\r\\n\\r\\n    // --- Getters ---\\r\\n\\r\\n    function getTroveOwnersCount() external view override returns (uint256) {\\r\\n        return TroveOwners.length;\\r\\n    }\\r\\n\\r\\n    function getTroveFromTroveOwnersArray(\\r\\n        uint256 _index\\r\\n    ) external view override returns (address) {\\r\\n        return TroveOwners[_index];\\r\\n    }\\r\\n\\r\\n    // --- Trove Liquidation functions ---\\r\\n\\r\\n    /// Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio.\\r\\n    function liquidate(address _borrower) external override {\\r\\n        _requireTroveIsActive(_borrower);\\r\\n\\r\\n        address[] memory borrowers = new address[](1);\\r\\n        borrowers[0] = _borrower;\\r\\n        batchLiquidateTroves(borrowers);\\r\\n    }\\r\\n\\r\\n    // --- Inner single liquidation functions ---\\r\\n\\r\\n    /// Liquidate one trove, in Normal Mode.\\r\\n    function _liquidateNormalMode(\\r\\n        IActivePool _activePool,\\r\\n        IDefaultPool _defaultPool,\\r\\n        address _borrower,\\r\\n        uint256 _ZUSDInStabPool\\r\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\r\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\r\\n\\r\\n        (\\r\\n            singleLiquidation.entireTroveDebt,\\r\\n            singleLiquidation.entireTroveColl,\\r\\n            vars.pendingDebtReward,\\r\\n            vars.pendingCollReward\\r\\n        ) = getEntireDebtAndColl(_borrower);\\r\\n\\r\\n        _movePendingTroveRewardsToActivePool(\\r\\n            _activePool,\\r\\n            _defaultPool,\\r\\n            vars.pendingDebtReward,\\r\\n            vars.pendingCollReward\\r\\n        );\\r\\n        _removeStake(_borrower);\\r\\n\\r\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\r\\n            singleLiquidation.entireTroveColl\\r\\n        );\\r\\n        singleLiquidation.ZUSDGasCompensation = ZUSD_GAS_COMPENSATION;\\r\\n        uint256 collToLiquidate = singleLiquidation.entireTroveColl.sub(\\r\\n            singleLiquidation.collGasCompensation\\r\\n        );\\r\\n\\r\\n        (\\r\\n            singleLiquidation.debtToOffset,\\r\\n            singleLiquidation.collToSendToSP,\\r\\n            singleLiquidation.debtToRedistribute,\\r\\n            singleLiquidation.collToRedistribute\\r\\n        ) = _getOffsetAndRedistributionVals(\\r\\n            singleLiquidation.entireTroveDebt,\\r\\n            collToLiquidate,\\r\\n            _ZUSDInStabPool\\r\\n        );\\r\\n\\r\\n        _closeTrove(_borrower, Status.closedByLiquidation);\\r\\n        emit TroveLiquidated(\\r\\n            _borrower,\\r\\n            singleLiquidation.entireTroveDebt,\\r\\n            singleLiquidation.entireTroveColl,\\r\\n            TroveManagerOperation.liquidateInNormalMode\\r\\n        );\\r\\n        emit TroveUpdated(_borrower, 0, 0, 0, TroveManagerOperation.liquidateInNormalMode);\\r\\n        return singleLiquidation;\\r\\n    }\\r\\n\\r\\n    /// Liquidate one trove, in Recovery Mode.\\r\\n    function _liquidateRecoveryMode(\\r\\n        IActivePool _activePool,\\r\\n        IDefaultPool _defaultPool,\\r\\n        address _borrower,\\r\\n        uint256 _ICR,\\r\\n        uint256 _ZUSDInStabPool,\\r\\n        uint256 _TCR,\\r\\n        uint256 _price\\r\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\r\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\r\\n        if (TroveOwners.length <= 1) {\\r\\n            return singleLiquidation;\\r\\n        } // don't liquidate if last trove\\r\\n        (\\r\\n            singleLiquidation.entireTroveDebt,\\r\\n            singleLiquidation.entireTroveColl,\\r\\n            vars.pendingDebtReward,\\r\\n            vars.pendingCollReward\\r\\n        ) = getEntireDebtAndColl(_borrower);\\r\\n\\r\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\r\\n            singleLiquidation.entireTroveColl\\r\\n        );\\r\\n        singleLiquidation.ZUSDGasCompensation = ZUSD_GAS_COMPENSATION;\\r\\n        vars.collToLiquidate = singleLiquidation.entireTroveColl.sub(\\r\\n            singleLiquidation.collGasCompensation\\r\\n        );\\r\\n\\r\\n        // If ICR <= 100%, purely redistribute the Trove across all active Troves\\r\\n        if (_ICR <= _100pct) {\\r\\n            _movePendingTroveRewardsToActivePool(\\r\\n                _activePool,\\r\\n                _defaultPool,\\r\\n                vars.pendingDebtReward,\\r\\n                vars.pendingCollReward\\r\\n            );\\r\\n            _removeStake(_borrower);\\r\\n\\r\\n            singleLiquidation.debtToOffset = 0;\\r\\n            singleLiquidation.collToSendToSP = 0;\\r\\n            singleLiquidation.debtToRedistribute = singleLiquidation.entireTroveDebt;\\r\\n            singleLiquidation.collToRedistribute = vars.collToLiquidate;\\r\\n\\r\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\r\\n            emit TroveLiquidated(\\r\\n                _borrower,\\r\\n                singleLiquidation.entireTroveDebt,\\r\\n                singleLiquidation.entireTroveColl,\\r\\n                TroveManagerOperation.liquidateInRecoveryMode\\r\\n            );\\r\\n            emit TroveUpdated(_borrower, 0, 0, 0, TroveManagerOperation.liquidateInRecoveryMode);\\r\\n\\r\\n            // If 100% < ICR < MCR, offset as much as possible, and redistribute the remainder\\r\\n        } else if ((_ICR > _100pct) && (_ICR < liquityBaseParams.MCR())) {\\r\\n            _movePendingTroveRewardsToActivePool(\\r\\n                _activePool,\\r\\n                _defaultPool,\\r\\n                vars.pendingDebtReward,\\r\\n                vars.pendingCollReward\\r\\n            );\\r\\n            _removeStake(_borrower);\\r\\n\\r\\n            (\\r\\n                singleLiquidation.debtToOffset,\\r\\n                singleLiquidation.collToSendToSP,\\r\\n                singleLiquidation.debtToRedistribute,\\r\\n                singleLiquidation.collToRedistribute\\r\\n            ) = _getOffsetAndRedistributionVals(\\r\\n                singleLiquidation.entireTroveDebt,\\r\\n                vars.collToLiquidate,\\r\\n                _ZUSDInStabPool\\r\\n            );\\r\\n\\r\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\r\\n            emit TroveLiquidated(\\r\\n                _borrower,\\r\\n                singleLiquidation.entireTroveDebt,\\r\\n                singleLiquidation.entireTroveColl,\\r\\n                TroveManagerOperation.liquidateInRecoveryMode\\r\\n            );\\r\\n            emit TroveUpdated(_borrower, 0, 0, 0, TroveManagerOperation.liquidateInRecoveryMode);\\r\\n            /*\\r\\n             * If 110% <= ICR < current TCR (accounting for the preceding liquidations in the current sequence)\\r\\n             * and there is ZUSD in the Stability Pool, only offset, with no redistribution,\\r\\n             * but at a capped rate of 1.1 and only if the whole debt can be liquidated.\\r\\n             * The remainder due to the capped rate will be claimable as collateral surplus.\\r\\n             */\\r\\n        } else if (\\r\\n            (_ICR >= liquityBaseParams.MCR()) &&\\r\\n            (_ICR < _TCR) &&\\r\\n            (singleLiquidation.entireTroveDebt <= _ZUSDInStabPool)\\r\\n        ) {\\r\\n            _movePendingTroveRewardsToActivePool(\\r\\n                _activePool,\\r\\n                _defaultPool,\\r\\n                vars.pendingDebtReward,\\r\\n                vars.pendingCollReward\\r\\n            );\\r\\n            assert(_ZUSDInStabPool != 0);\\r\\n\\r\\n            _removeStake(_borrower);\\r\\n            singleLiquidation = _getCappedOffsetVals(\\r\\n                singleLiquidation.entireTroveDebt,\\r\\n                singleLiquidation.entireTroveColl,\\r\\n                _price\\r\\n            );\\r\\n\\r\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\r\\n            if (singleLiquidation.collSurplus > 0) {\\r\\n                collSurplusPool.accountSurplus(_borrower, singleLiquidation.collSurplus);\\r\\n            }\\r\\n\\r\\n            emit TroveLiquidated(\\r\\n                _borrower,\\r\\n                singleLiquidation.entireTroveDebt,\\r\\n                singleLiquidation.collToSendToSP,\\r\\n                TroveManagerOperation.liquidateInRecoveryMode\\r\\n            );\\r\\n            emit TroveUpdated(_borrower, 0, 0, 0, TroveManagerOperation.liquidateInRecoveryMode);\\r\\n        } else {\\r\\n            // if (_ICR >= liquityBaseParams.MCR() && ( _ICR >= _TCR || singleLiquidation.entireTroveDebt > _ZUSDInStabPool))\\r\\n            LiquidationValues memory zeroVals;\\r\\n            return zeroVals;\\r\\n        }\\r\\n\\r\\n        return singleLiquidation;\\r\\n    }\\r\\n\\r\\n    /** In a full liquidation, returns the values for a trove's coll and debt to be offset, and coll and debt to be\\r\\n     * redistributed to active troves.\\r\\n     */\\r\\n    function _getOffsetAndRedistributionVals(\\r\\n        uint256 _debt,\\r\\n        uint256 _coll,\\r\\n        uint256 _ZUSDInStabPool\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 debtToOffset,\\r\\n            uint256 collToSendToSP,\\r\\n            uint256 debtToRedistribute,\\r\\n            uint256 collToRedistribute\\r\\n        )\\r\\n    {\\r\\n        if (_ZUSDInStabPool > 0) {\\r\\n            /*\\r\\n             * Offset as much debt & collateral as possible against the Stability Pool, and redistribute the remainder\\r\\n             * between all active troves.\\r\\n             *\\r\\n             *  If the trove's debt is larger than the deposited ZUSD in the Stability Pool:\\r\\n             *\\r\\n             *  - Offset an amount of the trove's debt equal to the ZUSD in the Stability Pool\\r\\n             *  - Send a fraction of the trove's collateral to the Stability Pool, equal to the fraction of its offset debt\\r\\n             *\\r\\n             */\\r\\n            debtToOffset = LiquityMath._min(_debt, _ZUSDInStabPool);\\r\\n            collToSendToSP = _coll.mul(debtToOffset).div(_debt);\\r\\n            debtToRedistribute = _debt.sub(debtToOffset);\\r\\n            collToRedistribute = _coll.sub(collToSendToSP);\\r\\n        } else {\\r\\n            debtToOffset = 0;\\r\\n            collToSendToSP = 0;\\r\\n            debtToRedistribute = _debt;\\r\\n            collToRedistribute = _coll;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  Get its offset coll/debt and ETH gas comp, and close the trove.\\r\\n     */\\r\\n    function _getCappedOffsetVals(\\r\\n        uint256 _entireTroveDebt,\\r\\n        uint256 _entireTroveColl,\\r\\n        uint256 _price\\r\\n    ) internal view returns (LiquidationValues memory singleLiquidation) {\\r\\n        singleLiquidation.entireTroveDebt = _entireTroveDebt;\\r\\n        singleLiquidation.entireTroveColl = _entireTroveColl;\\r\\n        uint256 collToOffset = _entireTroveDebt.mul(liquityBaseParams.MCR()).div(_price);\\r\\n\\r\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(collToOffset);\\r\\n        singleLiquidation.ZUSDGasCompensation = ZUSD_GAS_COMPENSATION;\\r\\n\\r\\n        singleLiquidation.debtToOffset = _entireTroveDebt;\\r\\n        singleLiquidation.collToSendToSP = collToOffset.sub(singleLiquidation.collGasCompensation);\\r\\n        singleLiquidation.collSurplus = _entireTroveColl.sub(collToOffset);\\r\\n        singleLiquidation.debtToRedistribute = 0;\\r\\n        singleLiquidation.collToRedistribute = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves,\\r\\n     * starting from the one with the lowest collateral ratio in the system, and moving upwards\\r\\n     */\\r\\n    function liquidateTroves(uint256 _n) external override {\\r\\n        ContractsCache memory contractsCache = ContractsCache(\\r\\n            activePool,\\r\\n            defaultPool,\\r\\n            IZUSDToken(address(0)),\\r\\n            IZEROStaking(address(0)),\\r\\n            sortedTroves,\\r\\n            ICollSurplusPool(address(0)),\\r\\n            address(0)\\r\\n        );\\r\\n        IStabilityPool stabilityPoolCached = _stabilityPool;\\r\\n\\r\\n        LocalVariables_OuterLiquidationFunction memory vars;\\r\\n\\r\\n        LiquidationTotals memory totals;\\r\\n\\r\\n        vars.price = priceFeed.fetchPrice();\\r\\n        vars.ZUSDInStabPool = stabilityPoolCached.getTotalZUSDDeposits();\\r\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\r\\n\\r\\n        // Perform the appropriate liquidation sequence - tally the values, and obtain their totals\\r\\n        if (vars.recoveryModeAtStart) {\\r\\n            totals = _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\r\\n                contractsCache,\\r\\n                vars.price,\\r\\n                vars.ZUSDInStabPool,\\r\\n                _n\\r\\n            );\\r\\n        } else {\\r\\n            // if !vars.recoveryModeAtStart\\r\\n            totals = _getTotalsFromLiquidateTrovesSequence_NormalMode(\\r\\n                contractsCache.activePool,\\r\\n                contractsCache.defaultPool,\\r\\n                vars.price,\\r\\n                vars.ZUSDInStabPool,\\r\\n                _n\\r\\n            );\\r\\n        }\\r\\n\\r\\n        require(totals.totalDebtInSequence > 0, \\\"TroveManager: nothing to liquidate\\\");\\r\\n\\r\\n        // Move liquidated ETH and ZUSD to the appropriate pools\\r\\n        stabilityPoolCached.offset(totals.totalDebtToOffset, totals.totalCollToSendToSP);\\r\\n        _redistributeDebtAndColl(\\r\\n            contractsCache.activePool,\\r\\n            contractsCache.defaultPool,\\r\\n            totals.totalDebtToRedistribute,\\r\\n            totals.totalCollToRedistribute\\r\\n        );\\r\\n        if (totals.totalCollSurplus > 0) {\\r\\n            contractsCache.activePool.sendETH(address(collSurplusPool), totals.totalCollSurplus);\\r\\n        }\\r\\n\\r\\n        // Update system snapshots\\r\\n        _updateSystemSnapshots_excludeCollRemainder(\\r\\n            contractsCache.activePool,\\r\\n            totals.totalCollGasCompensation\\r\\n        );\\r\\n\\r\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\r\\n        vars.liquidatedColl = totals.totalCollInSequence.sub(totals.totalCollGasCompensation).sub(\\r\\n            totals.totalCollSurplus\\r\\n        );\\r\\n        emit Liquidation(\\r\\n            vars.liquidatedDebt,\\r\\n            vars.liquidatedColl,\\r\\n            totals.totalCollGasCompensation,\\r\\n            totals.totalZUSDGasCompensation\\r\\n        );\\r\\n\\r\\n        // Send gas compensation to caller\\r\\n        _sendGasCompensation(\\r\\n            contractsCache.activePool,\\r\\n            msg.sender,\\r\\n            totals.totalZUSDGasCompensation,\\r\\n            totals.totalCollGasCompensation\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This function is used when the liquidateTroves sequence starts during Recovery Mode. However, it\\r\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\r\\n     */\\r\\n    function _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\r\\n        ContractsCache memory _contractsCache,\\r\\n        uint256 _price,\\r\\n        uint256 _ZUSDInStabPool,\\r\\n        uint256 _n\\r\\n    ) internal returns (LiquidationTotals memory totals) {\\r\\n        LocalVariables_LiquidationSequence memory vars;\\r\\n        LiquidationValues memory singleLiquidation;\\r\\n\\r\\n        vars.remainingZUSDInStabPool = _ZUSDInStabPool;\\r\\n        vars.backToNormalMode = false;\\r\\n        vars.entireSystemDebt = getEntireSystemDebt();\\r\\n        vars.entireSystemColl = getEntireSystemColl();\\r\\n\\r\\n        vars.user = _contractsCache.sortedTroves.getLast();\\r\\n        address firstUser = _contractsCache.sortedTroves.getFirst();\\r\\n        for (vars.i = 0; vars.i < _n && vars.user != firstUser; vars.i++) {\\r\\n            // we need to cache it, because current user is likely going to be deleted\\r\\n            address nextUser = _contractsCache.sortedTroves.getPrev(vars.user);\\r\\n\\r\\n            vars.ICR = _getCurrentICR(vars.user, _price);\\r\\n\\r\\n            if (!vars.backToNormalMode) {\\r\\n                // Break the loop if ICR is greater than liquityBaseParams.MCR() and Stability Pool is empty\\r\\n                if (vars.ICR >= liquityBaseParams.MCR() && vars.remainingZUSDInStabPool == 0) {\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                uint256 TCR = LiquityMath._computeCR(\\r\\n                    vars.entireSystemColl,\\r\\n                    vars.entireSystemDebt,\\r\\n                    _price\\r\\n                );\\r\\n\\r\\n                singleLiquidation = _liquidateRecoveryMode(\\r\\n                    _contractsCache.activePool,\\r\\n                    _contractsCache.defaultPool,\\r\\n                    vars.user,\\r\\n                    vars.ICR,\\r\\n                    vars.remainingZUSDInStabPool,\\r\\n                    TCR,\\r\\n                    _price\\r\\n                );\\r\\n\\r\\n                // Update aggregate trackers\\r\\n                vars.remainingZUSDInStabPool = vars.remainingZUSDInStabPool.sub(\\r\\n                    singleLiquidation.debtToOffset\\r\\n                );\\r\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(singleLiquidation.debtToOffset);\\r\\n                vars.entireSystemColl = vars\\r\\n                    .entireSystemColl\\r\\n                    .sub(singleLiquidation.collToSendToSP)\\r\\n                    .sub(singleLiquidation.collSurplus);\\r\\n\\r\\n                // Add liquidation values to their respective running totals\\r\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\r\\n\\r\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\r\\n                    vars.entireSystemColl,\\r\\n                    vars.entireSystemDebt,\\r\\n                    _price\\r\\n                );\\r\\n            } else if (vars.backToNormalMode && vars.ICR < liquityBaseParams.MCR()) {\\r\\n                singleLiquidation = _liquidateNormalMode(\\r\\n                    _contractsCache.activePool,\\r\\n                    _contractsCache.defaultPool,\\r\\n                    vars.user,\\r\\n                    vars.remainingZUSDInStabPool\\r\\n                );\\r\\n\\r\\n                vars.remainingZUSDInStabPool = vars.remainingZUSDInStabPool.sub(\\r\\n                    singleLiquidation.debtToOffset\\r\\n                );\\r\\n\\r\\n                // Add liquidation values to their respective running totals\\r\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\r\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\r\\n\\r\\n            vars.user = nextUser;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getTotalsFromLiquidateTrovesSequence_NormalMode(\\r\\n        IActivePool _activePool,\\r\\n        IDefaultPool _defaultPool,\\r\\n        uint256 _price,\\r\\n        uint256 _ZUSDInStabPool,\\r\\n        uint256 _n\\r\\n    ) internal returns (LiquidationTotals memory totals) {\\r\\n        LocalVariables_LiquidationSequence memory vars;\\r\\n        LiquidationValues memory singleLiquidation;\\r\\n        ISortedTroves sortedTrovesCached = sortedTroves;\\r\\n\\r\\n        vars.remainingZUSDInStabPool = _ZUSDInStabPool;\\r\\n\\r\\n        for (vars.i = 0; vars.i < _n; vars.i++) {\\r\\n            vars.user = sortedTrovesCached.getLast();\\r\\n            vars.ICR = _getCurrentICR(vars.user, _price);\\r\\n\\r\\n            if (vars.ICR < liquityBaseParams.MCR()) {\\r\\n                singleLiquidation = _liquidateNormalMode(\\r\\n                    _activePool,\\r\\n                    _defaultPool,\\r\\n                    vars.user,\\r\\n                    vars.remainingZUSDInStabPool\\r\\n                );\\r\\n\\r\\n                vars.remainingZUSDInStabPool = vars.remainingZUSDInStabPool.sub(\\r\\n                    singleLiquidation.debtToOffset\\r\\n                );\\r\\n\\r\\n                // Add liquidation values to their respective running totals\\r\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\r\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Attempt to liquidate a custom list of troves provided by the caller.\\r\\n     */\\r\\n    function batchLiquidateTroves(address[] memory _troveArray) public override {\\r\\n        require(_troveArray.length != 0, \\\"TroveManager: Calldata address array must not be empty\\\");\\r\\n\\r\\n        IActivePool activePoolCached = activePool;\\r\\n        IDefaultPool defaultPoolCached = defaultPool;\\r\\n        IStabilityPool stabilityPoolCached = _stabilityPool;\\r\\n\\r\\n        LocalVariables_OuterLiquidationFunction memory vars;\\r\\n        LiquidationTotals memory totals;\\r\\n\\r\\n        vars.price = priceFeed.fetchPrice();\\r\\n        vars.ZUSDInStabPool = stabilityPoolCached.getTotalZUSDDeposits();\\r\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\r\\n\\r\\n        // Perform the appropriate liquidation sequence - tally values and obtain their totals.\\r\\n        if (vars.recoveryModeAtStart) {\\r\\n            totals = _getTotalFromBatchLiquidate_RecoveryMode(\\r\\n                activePoolCached,\\r\\n                defaultPoolCached,\\r\\n                vars.price,\\r\\n                vars.ZUSDInStabPool,\\r\\n                _troveArray\\r\\n            );\\r\\n        } else {\\r\\n            //  if !vars.recoveryModeAtStart\\r\\n            totals = _getTotalsFromBatchLiquidate_NormalMode(\\r\\n                activePoolCached,\\r\\n                defaultPoolCached,\\r\\n                vars.price,\\r\\n                vars.ZUSDInStabPool,\\r\\n                _troveArray\\r\\n            );\\r\\n        }\\r\\n\\r\\n        require(totals.totalDebtInSequence > 0, \\\"TroveManager: nothing to liquidate\\\");\\r\\n\\r\\n        // Move liquidated ETH and ZUSD to the appropriate pools\\r\\n        stabilityPoolCached.offset(totals.totalDebtToOffset, totals.totalCollToSendToSP);\\r\\n        _redistributeDebtAndColl(\\r\\n            activePoolCached,\\r\\n            defaultPoolCached,\\r\\n            totals.totalDebtToRedistribute,\\r\\n            totals.totalCollToRedistribute\\r\\n        );\\r\\n        if (totals.totalCollSurplus > 0) {\\r\\n            activePoolCached.sendETH(address(collSurplusPool), totals.totalCollSurplus);\\r\\n        }\\r\\n\\r\\n        // Update system snapshots\\r\\n        _updateSystemSnapshots_excludeCollRemainder(\\r\\n            activePoolCached,\\r\\n            totals.totalCollGasCompensation\\r\\n        );\\r\\n\\r\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\r\\n        vars.liquidatedColl = totals.totalCollInSequence.sub(totals.totalCollGasCompensation).sub(\\r\\n            totals.totalCollSurplus\\r\\n        );\\r\\n        emit Liquidation(\\r\\n            vars.liquidatedDebt,\\r\\n            vars.liquidatedColl,\\r\\n            totals.totalCollGasCompensation,\\r\\n            totals.totalZUSDGasCompensation\\r\\n        );\\r\\n\\r\\n        // Send gas compensation to caller\\r\\n        _sendGasCompensation(\\r\\n            activePoolCached,\\r\\n            msg.sender,\\r\\n            totals.totalZUSDGasCompensation,\\r\\n            totals.totalCollGasCompensation\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This function is used when the batch liquidation sequence starts during Recovery Mode. However, it\\r\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\r\\n     */\\r\\n    function _getTotalFromBatchLiquidate_RecoveryMode(\\r\\n        IActivePool _activePool,\\r\\n        IDefaultPool _defaultPool,\\r\\n        uint256 _price,\\r\\n        uint256 _ZUSDInStabPool,\\r\\n        address[] memory _troveArray\\r\\n    ) internal returns (LiquidationTotals memory totals) {\\r\\n        LocalVariables_LiquidationSequence memory vars;\\r\\n        LiquidationValues memory singleLiquidation;\\r\\n\\r\\n        vars.remainingZUSDInStabPool = _ZUSDInStabPool;\\r\\n        vars.backToNormalMode = false;\\r\\n        vars.entireSystemDebt = getEntireSystemDebt();\\r\\n        vars.entireSystemColl = getEntireSystemColl();\\r\\n\\r\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\r\\n            vars.user = _troveArray[vars.i];\\r\\n            // Skip non-active troves\\r\\n            if (Troves[vars.user].status != Status.active) {\\r\\n                continue;\\r\\n            }\\r\\n            vars.ICR = _getCurrentICR(vars.user, _price);\\r\\n\\r\\n            if (!vars.backToNormalMode) {\\r\\n                // Skip this trove if ICR is greater than liquityBaseParams.MCR() and Stability Pool is empty\\r\\n                if (vars.ICR >= liquityBaseParams.MCR() && vars.remainingZUSDInStabPool == 0) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                uint256 TCR = LiquityMath._computeCR(\\r\\n                    vars.entireSystemColl,\\r\\n                    vars.entireSystemDebt,\\r\\n                    _price\\r\\n                );\\r\\n\\r\\n                singleLiquidation = _liquidateRecoveryMode(\\r\\n                    _activePool,\\r\\n                    _defaultPool,\\r\\n                    vars.user,\\r\\n                    vars.ICR,\\r\\n                    vars.remainingZUSDInStabPool,\\r\\n                    TCR,\\r\\n                    _price\\r\\n                );\\r\\n\\r\\n                // Update aggregate trackers\\r\\n                vars.remainingZUSDInStabPool = vars.remainingZUSDInStabPool.sub(\\r\\n                    singleLiquidation.debtToOffset\\r\\n                );\\r\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(singleLiquidation.debtToOffset);\\r\\n                vars.entireSystemColl = vars.entireSystemColl.sub(\\r\\n                    singleLiquidation.collToSendToSP\\r\\n                );\\r\\n\\r\\n                // Add liquidation values to their respective running totals\\r\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\r\\n\\r\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\r\\n                    vars.entireSystemColl,\\r\\n                    vars.entireSystemDebt,\\r\\n                    _price\\r\\n                );\\r\\n            } else if (vars.backToNormalMode && vars.ICR < liquityBaseParams.MCR()) {\\r\\n                singleLiquidation = _liquidateNormalMode(\\r\\n                    _activePool,\\r\\n                    _defaultPool,\\r\\n                    vars.user,\\r\\n                    vars.remainingZUSDInStabPool\\r\\n                );\\r\\n                vars.remainingZUSDInStabPool = vars.remainingZUSDInStabPool.sub(\\r\\n                    singleLiquidation.debtToOffset\\r\\n                );\\r\\n\\r\\n                // Add liquidation values to their respective running totals\\r\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\r\\n            } else continue; // In Normal Mode skip troves with ICR >= MCR\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getTotalsFromBatchLiquidate_NormalMode(\\r\\n        IActivePool _activePool,\\r\\n        IDefaultPool _defaultPool,\\r\\n        uint256 _price,\\r\\n        uint256 _ZUSDInStabPool,\\r\\n        address[] memory _troveArray\\r\\n    ) internal returns (LiquidationTotals memory totals) {\\r\\n        LocalVariables_LiquidationSequence memory vars;\\r\\n        LiquidationValues memory singleLiquidation;\\r\\n\\r\\n        vars.remainingZUSDInStabPool = _ZUSDInStabPool;\\r\\n\\r\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\r\\n            vars.user = _troveArray[vars.i];\\r\\n            vars.ICR = _getCurrentICR(vars.user, _price);\\r\\n\\r\\n            if (vars.ICR < liquityBaseParams.MCR()) {\\r\\n                singleLiquidation = _liquidateNormalMode(\\r\\n                    _activePool,\\r\\n                    _defaultPool,\\r\\n                    vars.user,\\r\\n                    vars.remainingZUSDInStabPool\\r\\n                );\\r\\n                vars.remainingZUSDInStabPool = vars.remainingZUSDInStabPool.sub(\\r\\n                    singleLiquidation.debtToOffset\\r\\n                );\\r\\n\\r\\n                // Add liquidation values to their respective running totals\\r\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- Liquidation helper functions ---\\r\\n\\r\\n    function _addLiquidationValuesToTotals(\\r\\n        LiquidationTotals memory oldTotals,\\r\\n        LiquidationValues memory singleLiquidation\\r\\n    ) internal pure returns (LiquidationTotals memory newTotals) {\\r\\n        // Tally all the values with their respective running totals\\r\\n        newTotals.totalCollGasCompensation = oldTotals.totalCollGasCompensation.add(\\r\\n            singleLiquidation.collGasCompensation\\r\\n        );\\r\\n        newTotals.totalZUSDGasCompensation = oldTotals.totalZUSDGasCompensation.add(\\r\\n            singleLiquidation.ZUSDGasCompensation\\r\\n        );\\r\\n        newTotals.totalDebtInSequence = oldTotals.totalDebtInSequence.add(\\r\\n            singleLiquidation.entireTroveDebt\\r\\n        );\\r\\n        newTotals.totalCollInSequence = oldTotals.totalCollInSequence.add(\\r\\n            singleLiquidation.entireTroveColl\\r\\n        );\\r\\n        newTotals.totalDebtToOffset = oldTotals.totalDebtToOffset.add(\\r\\n            singleLiquidation.debtToOffset\\r\\n        );\\r\\n        newTotals.totalCollToSendToSP = oldTotals.totalCollToSendToSP.add(\\r\\n            singleLiquidation.collToSendToSP\\r\\n        );\\r\\n        newTotals.totalDebtToRedistribute = oldTotals.totalDebtToRedistribute.add(\\r\\n            singleLiquidation.debtToRedistribute\\r\\n        );\\r\\n        newTotals.totalCollToRedistribute = oldTotals.totalCollToRedistribute.add(\\r\\n            singleLiquidation.collToRedistribute\\r\\n        );\\r\\n        newTotals.totalCollSurplus = oldTotals.totalCollSurplus.add(singleLiquidation.collSurplus);\\r\\n\\r\\n        return newTotals;\\r\\n    }\\r\\n\\r\\n    function _sendGasCompensation(\\r\\n        IActivePool _activePool,\\r\\n        address _liquidator,\\r\\n        uint256 _ZUSD,\\r\\n        uint256 _ETH\\r\\n    ) internal {\\r\\n        if (_ZUSD > 0) {\\r\\n            _zusdToken.returnFromPool(gasPoolAddress, _liquidator, _ZUSD);\\r\\n        }\\r\\n\\r\\n        if (_ETH > 0) {\\r\\n            _activePool.sendETH(_liquidator, _ETH);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- Helper functions ---\\r\\n\\r\\n    /// @return the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\\r\\n    function getNominalICR(address _borrower) public view override returns (uint256) {\\r\\n        (uint256 currentETH, uint256 currentZUSDDebt) = _getCurrentTroveAmounts(_borrower);\\r\\n\\r\\n        uint256 NICR = LiquityMath._computeNominalCR(currentETH, currentZUSDDebt);\\r\\n        return NICR;\\r\\n    }\\r\\n\\r\\n    function applyPendingRewards(address _borrower) external override {\\r\\n        _requireCallerIsBorrowerOperations();\\r\\n        return _applyPendingRewards(activePool, defaultPool, _borrower);\\r\\n    }\\r\\n\\r\\n    /// Update borrower's snapshots of L_ETH and L_ZUSDDebt to reflect the current values\\r\\n    function updateTroveRewardSnapshots(address _borrower) external override {\\r\\n        _requireCallerIsBorrowerOperations();\\r\\n        return _updateTroveRewardSnapshots(_borrower);\\r\\n    }\\r\\n\\r\\n    /// Return the Troves entire debt and coll, including pending rewards from redistributions.\\r\\n    function getEntireDebtAndColl(\\r\\n        address _borrower\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256 debt,\\r\\n            uint256 coll,\\r\\n            uint256 pendingZUSDDebtReward,\\r\\n            uint256 pendingETHReward\\r\\n        )\\r\\n    {\\r\\n        debt = Troves[_borrower].debt;\\r\\n        coll = Troves[_borrower].coll;\\r\\n\\r\\n        pendingZUSDDebtReward = getPendingZUSDDebtReward(_borrower);\\r\\n        pendingETHReward = getPendingETHReward(_borrower);\\r\\n\\r\\n        debt = debt.add(pendingZUSDDebtReward);\\r\\n        coll = coll.add(pendingETHReward);\\r\\n    }\\r\\n\\r\\n    function removeStake(address _borrower) external override {\\r\\n        _requireCallerIsBorrowerOperations();\\r\\n        return _removeStake(_borrower);\\r\\n    }\\r\\n\\r\\n    function updateStakeAndTotalStakes(address _borrower) external override returns (uint256) {\\r\\n        _requireCallerIsBorrowerOperations();\\r\\n        return _updateStakeAndTotalStakes(_borrower);\\r\\n    }\\r\\n\\r\\n    function _redistributeDebtAndColl(\\r\\n        IActivePool _activePool,\\r\\n        IDefaultPool _defaultPool,\\r\\n        uint256 _debt,\\r\\n        uint256 _coll\\r\\n    ) internal {\\r\\n        if (_debt == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * Add distributed coll and debt rewards-per-unit-staked to the running totals. Division uses a \\\"feedback\\\"\\r\\n         * error correction, to keep the cumulative error low in the running totals L_ETH and L_ZUSDDebt:\\r\\n         *\\r\\n         * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\r\\n         * function was called.\\r\\n         * 2) Calculate \\\"per-unit-staked\\\" ratios.\\r\\n         * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\r\\n         * 4) Store these errors for use in the next correction when this function is called.\\r\\n         * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\r\\n         */\\r\\n        uint256 ETHNumerator = _coll.mul(DECIMAL_PRECISION).add(lastETHError_Redistribution);\\r\\n        uint256 ZUSDDebtNumerator = _debt.mul(DECIMAL_PRECISION).add(\\r\\n            lastZUSDDebtError_Redistribution\\r\\n        );\\r\\n\\r\\n        // Get the per-unit-staked terms\\r\\n        uint256 ETHRewardPerUnitStaked = ETHNumerator.div(totalStakes);\\r\\n        uint256 ZUSDDebtRewardPerUnitStaked = ZUSDDebtNumerator.div(totalStakes);\\r\\n\\r\\n        lastETHError_Redistribution = ETHNumerator.sub(ETHRewardPerUnitStaked.mul(totalStakes));\\r\\n        lastZUSDDebtError_Redistribution = ZUSDDebtNumerator.sub(\\r\\n            ZUSDDebtRewardPerUnitStaked.mul(totalStakes)\\r\\n        );\\r\\n\\r\\n        // Add per-unit-staked terms to the running totals\\r\\n        L_ETH = L_ETH.add(ETHRewardPerUnitStaked);\\r\\n        L_ZUSDDebt = L_ZUSDDebt.add(ZUSDDebtRewardPerUnitStaked);\\r\\n\\r\\n        emit LTermsUpdated(L_ETH, L_ZUSDDebt);\\r\\n\\r\\n        // Transfer coll and debt from ActivePool to DefaultPool\\r\\n        _activePool.decreaseZUSDDebt(_debt);\\r\\n        _defaultPool.increaseZUSDDebt(_debt);\\r\\n        _activePool.sendETH(address(_defaultPool), _coll);\\r\\n    }\\r\\n\\r\\n    function closeTrove(address _borrower) external override {\\r\\n        _requireCallerIsBorrowerOperations();\\r\\n        return _closeTrove(_borrower, Status.closedByOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Updates snapshots of system total stakes and total collateral, excluding a given collateral remainder from the calculation.\\r\\n     * Used in a liquidation sequence.\\r\\n     *\\r\\n     * The calculation excludes a portion of collateral that is in the ActivePool:\\r\\n     *\\r\\n     * the total ETH gas compensation from the liquidation sequence\\r\\n     *\\r\\n     * The ETH as compensation must be excluded as it is always sent out at the very end of the liquidation sequence.\\r\\n     */\\r\\n    function _updateSystemSnapshots_excludeCollRemainder(\\r\\n        IActivePool _activePool,\\r\\n        uint256 _collRemainder\\r\\n    ) internal {\\r\\n        totalStakesSnapshot = totalStakes;\\r\\n\\r\\n        uint256 activeColl = _activePool.getETH();\\r\\n        uint256 liquidatedColl = defaultPool.getETH();\\r\\n        totalCollateralSnapshot = activeColl.sub(_collRemainder).add(liquidatedColl);\\r\\n\\r\\n        emit SystemSnapshotsUpdated(totalStakesSnapshot, totalCollateralSnapshot);\\r\\n    }\\r\\n\\r\\n    /// Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\r\\n    function addTroveOwnerToArray(address _borrower) external override returns (uint256 index) {\\r\\n        _requireCallerIsBorrowerOperations();\\r\\n        return _addTroveOwnerToArray(_borrower);\\r\\n    }\\r\\n\\r\\n    function _addTroveOwnerToArray(address _borrower) internal returns (uint128 index) {\\r\\n        /* Max array size is 2**128 - 1, i.e. ~3e30 troves. No risk of overflow, since troves have minimum ZUSD\\r\\n        debt of liquidation reserve plus MIN_NET_DEBT. 3e30 ZUSD dwarfs the value of all wealth in the world ( which is < 1e15 USD). */\\r\\n\\r\\n        // Push the Troveowner to the array\\r\\n        TroveOwners.push(_borrower);\\r\\n\\r\\n        // Record the index of the new Troveowner on their Trove struct\\r\\n        index = uint128(TroveOwners.length.sub(1));\\r\\n        Troves[_borrower].arrayIndex = index;\\r\\n\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    // --- Recovery Mode and TCR functions ---\\r\\n\\r\\n    function getTCR(uint256 _price) external view override returns (uint256) {\\r\\n        return _getTCR(_price);\\r\\n    }\\r\\n\\r\\n    function MCR() external view override returns (uint256) {\\r\\n        return liquityBaseParams.MCR();\\r\\n    }\\r\\n\\r\\n    function CCR() external view override returns (uint256) {\\r\\n        return liquityBaseParams.CCR();\\r\\n    }\\r\\n\\r\\n    function checkRecoveryMode(uint256 _price) external view override returns (bool) {\\r\\n        return _checkRecoveryMode(_price);\\r\\n    }\\r\\n\\r\\n    // Check whether or not the system *would be* in Recovery Mode, given an ETH:USD price, and the entire system coll and debt.\\r\\n    function _checkPotentialRecoveryMode(\\r\\n        uint256 _entireSystemColl,\\r\\n        uint256 _entireSystemDebt,\\r\\n        uint256 _price\\r\\n    ) internal view returns (bool) {\\r\\n        uint256 TCR = LiquityMath._computeCR(_entireSystemColl, _entireSystemDebt, _price);\\r\\n\\r\\n        return TCR < liquityBaseParams.CCR();\\r\\n    }\\r\\n\\r\\n    function getRedemptionRateWithDecay() public view override returns (uint256) {\\r\\n        return _calcRedemptionRate(_calcDecayedBaseRate());\\r\\n    }\\r\\n\\r\\n    function getRedemptionFeeWithDecay(\\r\\n        uint256 _ETHDrawn\\r\\n    ) external view override returns (uint256) {\\r\\n        return _calcRedemptionFee(getRedemptionRateWithDecay(), _ETHDrawn);\\r\\n    }\\r\\n\\r\\n    // --- Borrowing fee functions ---\\r\\n\\r\\n    function getBorrowingRate() public view override returns (uint256) {\\r\\n        return _calcBorrowingRate(baseRate);\\r\\n    }\\r\\n\\r\\n    function getBorrowingRateWithDecay() public view override returns (uint256) {\\r\\n        return _calcBorrowingRate(_calcDecayedBaseRate());\\r\\n    }\\r\\n\\r\\n    function _calcBorrowingRate(uint256 _baseRate) internal view returns (uint256) {\\r\\n        return\\r\\n            LiquityMath._min(\\r\\n                liquityBaseParams.BORROWING_FEE_FLOOR().add(_baseRate),\\r\\n                liquityBaseParams.MAX_BORROWING_FEE()\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getBorrowingFee(uint256 _ZUSDDebt) external view override returns (uint256) {\\r\\n        return _calcBorrowingFee(getBorrowingRate(), _ZUSDDebt);\\r\\n    }\\r\\n\\r\\n    function getBorrowingFeeWithDecay(uint256 _ZUSDDebt) external view override returns (uint256) {\\r\\n        return _calcBorrowingFee(getBorrowingRateWithDecay(), _ZUSDDebt);\\r\\n    }\\r\\n\\r\\n    function _calcBorrowingFee(\\r\\n        uint256 _borrowingRate,\\r\\n        uint256 _ZUSDDebt\\r\\n    ) internal pure returns (uint256) {\\r\\n        return _borrowingRate.mul(_ZUSDDebt).div(DECIMAL_PRECISION);\\r\\n    }\\r\\n\\r\\n    /// Updates the baseRate state variable based on time elapsed since the last redemption or ZUSD borrowing operation.\\r\\n    function decayBaseRateFromBorrowing() external override {\\r\\n        _requireCallerIsBorrowerOperations();\\r\\n\\r\\n        uint256 decayedBaseRate = _calcDecayedBaseRate();\\r\\n        assert(decayedBaseRate <= DECIMAL_PRECISION); // The baseRate can decay to 0\\r\\n\\r\\n        baseRate = decayedBaseRate;\\r\\n        emit BaseRateUpdated(decayedBaseRate);\\r\\n\\r\\n        _updateLastFeeOpTime();\\r\\n    }\\r\\n\\r\\n    // --- Internal fee functions ---\\r\\n\\r\\n    // --- Trove property getters ---\\r\\n\\r\\n    function getTroveStatus(address _borrower) external view override returns (uint256) {\\r\\n        return uint256(Troves[_borrower].status);\\r\\n    }\\r\\n\\r\\n    function getTroveStake(address _borrower) external view override returns (uint256) {\\r\\n        return Troves[_borrower].stake;\\r\\n    }\\r\\n\\r\\n    function getTroveDebt(address _borrower) external view override returns (uint256) {\\r\\n        return Troves[_borrower].debt;\\r\\n    }\\r\\n\\r\\n    function getTroveColl(address _borrower) external view override returns (uint256) {\\r\\n        return Troves[_borrower].coll;\\r\\n    }\\r\\n\\r\\n    // --- Trove property setters, called by BorrowerOperations ---\\r\\n\\r\\n    function setTroveStatus(address _borrower, uint256 _num) external override {\\r\\n        _requireCallerIsBorrowerOperations();\\r\\n        Troves[_borrower].status = Status(_num);\\r\\n    }\\r\\n\\r\\n    function increaseTroveColl(\\r\\n        address _borrower,\\r\\n        uint256 _collIncrease\\r\\n    ) external override returns (uint256) {\\r\\n        _requireCallerIsBorrowerOperations();\\r\\n        uint256 newColl = Troves[_borrower].coll.add(_collIncrease);\\r\\n        Troves[_borrower].coll = newColl;\\r\\n        return newColl;\\r\\n    }\\r\\n\\r\\n    function decreaseTroveColl(\\r\\n        address _borrower,\\r\\n        uint256 _collDecrease\\r\\n    ) external override returns (uint256) {\\r\\n        _requireCallerIsBorrowerOperations();\\r\\n        uint256 newColl = Troves[_borrower].coll.sub(_collDecrease);\\r\\n        Troves[_borrower].coll = newColl;\\r\\n        return newColl;\\r\\n    }\\r\\n\\r\\n    function increaseTroveDebt(\\r\\n        address _borrower,\\r\\n        uint256 _debtIncrease\\r\\n    ) external override returns (uint256) {\\r\\n        _requireCallerIsBorrowerOperations();\\r\\n        uint256 newDebt = Troves[_borrower].debt.add(_debtIncrease);\\r\\n        Troves[_borrower].debt = newDebt;\\r\\n        return newDebt;\\r\\n    }\\r\\n\\r\\n    function decreaseTroveDebt(\\r\\n        address _borrower,\\r\\n        uint256 _debtDecrease\\r\\n    ) external override returns (uint256) {\\r\\n        _requireCallerIsBorrowerOperations();\\r\\n        uint256 newDebt = Troves[_borrower].debt.sub(_debtDecrease);\\r\\n        Troves[_borrower].debt = newDebt;\\r\\n        return newDebt;\\r\\n    }\\r\\n\\r\\n    function getCurrentICR(\\r\\n        address _borrower,\\r\\n        uint256 _price\\r\\n    ) external view override returns (uint256) {\\r\\n        return _getCurrentICR(_borrower, _price);\\r\\n    }\\r\\n\\r\\n    function getPendingETHReward(address _borrower) public view override returns (uint256) {\\r\\n        return _getPendingETHReward(_borrower);\\r\\n    }\\r\\n\\r\\n    function getPendingZUSDDebtReward(address _borrower) public view override returns (uint256) {\\r\\n        return _getPendingZUSDDebtReward(_borrower);\\r\\n    }\\r\\n\\r\\n    function hasPendingRewards(address _borrower) public view override returns (bool) {\\r\\n        return _hasPendingRewards(_borrower);\\r\\n    }\\r\\n\\r\\n    function getRedemptionRate() public view override returns (uint256) {\\r\\n        return _getRedemptionRate();\\r\\n    }\\r\\n\\r\\n    /// @dev    this function forwards the call to the troveManagerRedeemOps in a delegate call fashion\\r\\n    ///         so the parameters are not needed\\r\\n    function redeemCollateral(\\r\\n        uint256 _ZUSDamount,\\r\\n        address _firstRedemptionHint,\\r\\n        address _upperPartialRedemptionHint,\\r\\n        address _lowerPartialRedemptionHint,\\r\\n        uint256 _partialRedemptionHintNICR,\\r\\n        uint256 _maxIterations,\\r\\n        uint256 _maxFeePercentage\\r\\n    ) external override {\\r\\n        (bool success, bytes memory returndata) = troveManagerRedeemOps.delegatecall(msg.data);\\r\\n        require(success, string(returndata));\\r\\n    }\\r\\n\\r\\n    /// @dev    this function forwards the call to the troveManagerRedeemOps in a delegate call fashion\\r\\n    ///         so the parameters are not needed\\r\\n    ///DLLR _owner or _spender can use Sovryn Mynt to convert DLLR to ZUSD, then use the Zero redemption mechanism to redeem ZUSD for RBTC, all in a single transaction\\r\\n    function redeemCollateralViaDLLR(\\r\\n        uint256 _dllrAmount,\\r\\n        address _firstRedemptionHint,\\r\\n        address _upperPartialRedemptionHint,\\r\\n        address _lowerPartialRedemptionHint,\\r\\n        uint256 _partialRedemptionHintNICR,\\r\\n        uint256 _maxIterations,\\r\\n        uint256 _maxFeePercentage,\\r\\n        IMassetManager.PermitParams calldata _permitParams\\r\\n    ) external override {\\r\\n        (bool success, bytes memory returndata) = troveManagerRedeemOps.delegatecall(msg.data);\\r\\n        require(success, string(returndata));\\r\\n    }\\r\\n}\",\"versionPragma\":\"0.6.11\"}}}","address":"0xaf459b2E0Cfa007137A33527fAea842E69FfFD8D","bytecode":"0x60a06040523480156200001157600080fd5b506040516200563938038062005639833981016040819052620000349162000118565b8062000049336001600160e01b036200005316565b6080525062000190565b6001600160a01b038116620000855760405162461bcd60e51b81526004016200007c906200014e565b60405180910390fd5b6001600160a01b038116620000a26001600160e01b03620000f716565b6001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000604051620000e79062000131565b6040519081900390209190915550565b600080604051620001089062000131565b6040519081900390205492915050565b6000602082840312156200012a578081fd5b5051919050565b7035b2bc9737bbb730b136329737bbb732b960791b815260110190565b60208082526022908201527f4f776e61626c653a3a7365744f776e65723a20696e76616c6964206164647265604082015261737360f01b606082015260800190565b60805161548e620001ab60003980612144525061548e6000f3fe608060405234801561001057600080fd5b50600436106104ac5760003560e01c8063756b253e1161026d578063b7f8cf9b11610151578063d293c710116100ce578063d815e8e911610092578063d815e8e914610929578063d9a7244414610931578063e056e91814610944578063e2ac77b014610957578063f36b24251461096a578063fe2ba84814610972576104ac565b8063d293c710146108d5578063d380a37c146108e8578063d3d6f843146108f0578063d5b3563514610903578063d66a255314610916576104ac565b8063bf9befb111610115578063bf9befb1146108a2578063c35bc550146108aa578063c52861f2146108b2578063c7b55481146108ba578063cbd138ae146108c2576104ac565b8063b7f8cf9b14610849578063b82f263d14610851578063b91af97c14610864578063bcd3752614610887578063be4b03341461089a576104ac565b8063887105d3116101ea5780639f070670116101ae5780639f07067014610809578063a20baee614610755578063a3f4df7e14610811578063ae7bec1914610826578063ae9187541461082e578063b0d8e18114610836576104ac565b8063887105d3146107d6578063893d20e8146107de57806396d711ff146107e65780639976cf45146107ee5780639dd233d214610801576104ac565b80637cf54e40116102315780637cf54e40146107985780637f7dde4a146107a0578063807d138d146107a857806382fe3eb9146107b057806387436936146107c3576104ac565b8063756b253e14610765578063759b303414610778578063794e572414610780578063795d26c314610788578063797250e314610790576104ac565b806342ccf1e41161039457806361ec893d116103115780636b444952116102d55780636b4449521461070e5780636ef6433814610716578063716c47e61461073a57806372423c171461074257806372fe25aa14610755578063741bef1a1461075d576104ac565b806361ec893d146106c5578063631203b0146106cd57806364cee260146106e0578063653d46e7146106f357806366ca4a2114610706576104ac565b80634e443d9e116103585780634e443d9e1461066f5780635733d58f1461068f5780635d6b480f146106975780635d8c9609146106aa5780635dba4c4a146106bd576104ac565b806342ccf1e41461061b578063477d66cf1461062e578063480cd5781461064157806349eefeee146106545780634a767d681461065c576104ac565b806318f2817a1161042d57806321e37801116103f157806321e37801146105d55780632b11551a146105e85780632f865568146105f057806331c903b0146106035780633a1285951461060b5780633cc7422514610613576104ac565b806318f2817a1461058c5780631a59a50e1461059f5780631bf43555146105b25780631e8b1c2b146105ba5780631f68f20a146105cd576104ac565b806312610e921161047457806312610e921461051f57806313af40351461053257806315d549f1146105455780631673c79a1461055857806317c62b1714610579576104ac565b806301f16e18146104b157806305b6f5ca146104c6578063071a7541146104d95780630b076557146104f75780630d43e8ad1461050a575b600080fd5b6104c46104bf366004614c61565b610985565b005b6104c46104d4366004614e2c565b610eeb565b6104e1610f82565b6040516104ee919061531b565b60405180910390f35b6104c4610505366004614b6a565b610f87565b610512610faf565b6040516104ee9190614ee3565b6104e161052d366004614ba2565b610fbe565b6104c4610540366004614b6a565b611016565b6104e1610553366004614b6a565b611057565b61056b610566366004614b6a565b61107b565b6040516104ee929190615324565b6104e1610587366004614b6a565b611094565b6104e161059a366004614b6a565b61109f565b6104e16105ad366004614b6a565b6110b2565b6104e1611178565b6104c46105c8366004614bcd565b611185565b6104e16114e6565b6104e16105e3366004614b6a565b6114ec565b6104e1611516565b6104c46105fe366004614b6a565b611525565b6104e161158b565b610512611598565b6105126115a7565b6104e1610629366004614b6a565b6115b6565b6104e161063c366004614d8f565b6115e7565b6104e161064f366004614b6a565b6115fa565b6104e1611618565b6104e161066a366004614ba2565b61161e565b61068261067d366004614d8f565b61163d565b6040516104ee9190614f56565b6104e1611648565b6104c46106a5366004614ba2565b6116c5565b6104e16106b8366004614b6a565b611711565b6104c461171c565b6104e1611787565b6104e16106db366004614d8f565b61178c565b6104e16106ee366004614b6a565b611799565b6104c4610701366004614d8f565b6117b7565b6104e1611b41565b6104e1611b53565b610729610724366004614b6a565b611b59565b6040516104ee959493929190615356565b610512611b93565b6104e1610750366004614ba2565b611ba2565b6104e1611bff565b610512611c0b565b610512610773366004614d8f565b611c1a565b6104e1611c41565b6104e1611c4e565b6104e1611c93565b6104e1611db2565b610512611db8565b610512611dc7565b6104e1611dd6565b6104c46107be366004614b6a565b611ddc565b6104c46107d1366004614b6a565b611ded565b6104e1611e79565b610512611f48565b6104e1611f67565b6104e16107fc366004614ba2565b611f6d565b6104e1611fa0565b610512611fa6565b610819611fb5565b6040516104ee9190614f8d565b610512611fdd565b610512611fec565b6104e1610844366004614b6a565b611ffb565b610512612022565b6104e161085f366004614d8f565b612031565b610877610872366004614b6a565b61203c565b6040516104ee9493929190615396565b6104c4610895366004614dbf565b6120a0565b6104e1612136565b6104e161213c565b6104e1612142565b6104e1612166565b6104e1612178565b6104c46108d0366004614b6a565b612184565b6104e16108e3366004614ba2565b612197565b6104e16121aa565b6104e16108fe366004614ba2565b6121b0565b6104e1610911366004614d8f565b6121e6565b6104e1610924366004614b6a565b6121f9565b610512612214565b61051261093f366004614d8f565b612223565b610682610952366004614b6a565b61224d565b610682610965366004614b6a565b6122ab565b6104e16122b6565b6104c4610980366004614b6a565b6122c3565b61098d611f48565b6001600160a01b0316336001600160a01b0316146109c65760405162461bcd60e51b81526004016109bd90615178565b60405180910390fd5b80516109d1906122d4565b6109de81602001516122d4565b6109eb81604001516122d4565b6109f881606001516122d4565b610a0581608001516122d4565b610a128160a001516122d4565b610a1f8160c001516122d4565b610a2c8160e001516122d4565b610a3a8161010001516122d4565b610a488161012001516122d4565b610a568161014001516122d4565b610a648161016001516122d4565b610a728161018001516122d4565b610a80816101a001516122d4565b8051600c80546001600160a01b03199081166001600160a01b038085169190911790925560208401516004805483169184169190911790556040808501516003805484169185169190911790556060850151600580548416918516919091179055608085015160008054841691851691909117905560a085015160018054841691851691909117905560c085015160068054841691851691909117905560e0850151600780548416918516919091179055610100850151600880548416918516919091179055610120850151600280548416918516919091179055610140850151600980548416918516919091179055610160850151600d80548416918516919091179055610180850151600a805484169185169190911790556101a0850151600b80549093169316929092179055517f84861842e6a98dd759145eb5e7b48279d0f02ebeabc8a69e5196b2f4c5023db991610bdb91614ee3565b60405180910390a17f6493041f605f233753d9b16dd158c9f297b8eaca22b2d0dc402a454f5683a5b18160200151604051610c169190614ee3565b60405180910390a17fbf65195e6d5213f6fcbce65b1454c925197a45e616dabd2e243542b039b050928160600151604051610c519190614ee3565b60405180910390a17f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed9858160600151604051610c8c9190614ee3565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828160800151604051610cc79190614ee3565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b8160a00151604051610d029190614ee3565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f8160c00151604051610d3d9190614ee3565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa08160e00151604051610d789190614ee3565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d816101000151604051610db49190614ee3565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db264816101200151604051610df09190614ee3565b60405180910390a17fcdf33850c44a1a874b5fefb51dae615ac6afebd581ef90d571f81b06541d8e9d816101400151604051610e2c9190614ee3565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe78800816101600151604051610e689190614ee3565b60405180910390a17f61e0c29d5028a9e4facaa476a46e78912e99f1ba945c9560b86b82ebe36ee52d816101800151604051610ea49190614ee3565b60405180910390a17f7624075ed781e3aa34b0f492d70d1bb5a6fcde04534165e20f990d2e546be4dd816101a00151604051610ee09190614ee3565b60405180910390a150565b6004546040516000916060916001600160a01b0390911690610f109084903690614eb6565b600060405180830381855af49150503d8060008114610f4b576040519150601f19603f3d011682016040523d82523d6000602084013e610f50565b606091505b5091509150818190610f755760405162461bcd60e51b81526004016109bd9190614f8d565b5050505050505050505050565b600281565b610f8f612319565b600054600154610fac916001600160a01b03908116911683612345565b50565b600c546001600160a01b031681565b6000610fc8612319565b6001600160a01b038316600090815260106020526040812054610ff1908463ffffffff61245716565b6001600160a01b03851660009081526010602052604090208190559150505b92915050565b61101e611f48565b6001600160a01b0316336001600160a01b03161461104e5760405162461bcd60e51b81526004016109bd90615178565b610fac81612499565b6000611061612319565b61106a82612524565b6001600160801b031690505b919050565b6016602052600090815260409020805460019091015482565b6000611010826115b6565b60006110a9612319565b611010826125be565b6001600160a01b03811660009081526016602052604081205460145482906110e0908363ffffffff61245716565b9050801580611119575060016001600160a01b03851660009081526010602052604090206003015460ff16600481111561111657fe5b14155b1561112957600092505050611076565b6001600160a01b0384166000908152601060205260408120600201549061116e670de0b6b3a7640000611162848663ffffffff61267116565b9063ffffffff6126ab16565b9695505050505050565b6809c2007651b250000081565b80516111a35760405162461bcd60e51b81526004016109bd906151a9565b6000546001546006546001600160a01b039283169291821691166111c5614a3d565b6111cd614a6e565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561121d57600080fd5b505af1158015611231573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112559190614da7565b826000018181525050826001600160a01b031663bdaf37ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561129757600080fd5b505afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf9190614da7565b602083015281516112df906126ed565b1580156040840152611307576113008585846000015185602001518a612788565b905061131f565b61131c8585846000015185602001518a612a9d565b90505b60008160200151116113435760405162461bcd60e51b81526004016109bd9061528a565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad9261137792600401615324565b600060405180830381600087803b15801561139157600080fd5b505af11580156113a5573d6000803e3d6000fd5b505050506113bd85858360c001518460e00151612bdd565b61010081015115611434576008546101008201516040516364a197f360e01b81526001600160a01b03888116936364a197f393611401939290911691600401614f3d565b600060405180830381600087803b15801561141b57600080fd5b505af115801561142f573d6000803e3d6000fd5b505050505b611442858260400151612e41565b602081015160608301526101008101516040820151825161147a929161146e919063ffffffff61245716565b9063ffffffff61245716565b608083018190526060808401516040808501519285015190517f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda9403946114c29490929091615396565b60405180910390a16114de853383606001518460400151612fa2565b505050505050565b600e5481565b6001600160a01b03811660009081526010602052604081206003015460ff16600481111561101057fe5b600061152061158b565b905090565b61152e8161307f565b60408051600180825281830190925260609160208083019080368337019050509050818160008151811061155e57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061158781611185565b5050565b6000611520600e546130c8565b600b546001600160a01b031681565b6001546001600160a01b031681565b6001600160a01b03811660009081526016602052604081206001015460155482906110e0908363ffffffff61245716565b60006110106115f4611b41565b83613165565b6001600160a01b031660009081526010602052604090206001015490565b60175490565b600080600061162c85613183565b91509150600061116e838387613209565b6000611010826126ed565b60035460408051635733d58f60e01b815290516000926001600160a01b031691635733d58f916004808301926020929190829003018186803b15801561168d57600080fd5b505afa1580156116a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190614da7565b6116cd612319565b8060048111156116d957fe5b6001600160a01b0383166000908152601060205260409020600301805460ff1916600183600481111561170857fe5b02179055505050565b6000611010826110b2565b611724612319565b600061172e61323b565b9050670de0b6b3a764000081111561174257fe5b600e8190556040517fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9061177790839061531b565b60405180910390a1610fac61327f565b603c81565b60006110106115f46122b6565b6001600160a01b031660009081526010602052604090206002015490565b6117bf614aba565b506040805160e081018252600080546001600160a01b0390811683526001548116602084015292820181905260608201819052600d548316608083015260a0820181905260c0820152600654909116611816614a3d565b61181e614a6e565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561186e57600080fd5b505af1158015611882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a69190614da7565b826000018181525050826001600160a01b031663bdaf37ea6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190614da7565b60208301528151611930906126ed565b1580156040840152611957576119508483600001518460200151886132d4565b9050611977565b61197484600001518560200151846000015185602001518961377b565b90505b600081602001511161199b5760405162461bcd60e51b81526004016109bd9061528a565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad926119cf92600401615324565b600060405180830381600087803b1580156119e957600080fd5b505af11580156119fd573d6000803e3d6000fd5b50505050611a1d846000015185602001518360c001518460e00151612bdd565b61010081015115611a945783516008546101008301516040516364a197f360e01b81526001600160a01b03938416936364a197f393611a6193911691600401614f3d565b600060405180830381600087803b158015611a7b57600080fd5b505af1158015611a8f573d6000803e3d6000fd5b505050505b611aa684600001518260400151612e41565b6020810151606083015261010081015160408201518251611ad2929161146e919063ffffffff61245716565b608083018190526060808401516040808501519285015190517f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda940394611b1a9490929091615396565b60405180910390a1611b3a84600001513383606001518460400151612fa2565b5050505050565b6000611520611b4e61323b565b613931565b60195481565b60106020526000908152604090208054600182015460028301546003909301549192909160ff81169061010090046001600160801b031685565b6004546001600160a01b031681565b6000611bac612319565b6001600160a01b038316600090815260106020526040812060010154611bd8908463ffffffff613a1316565b6001600160a01b038516600090815260106020526040902060010181905591505092915050565b670de0b6b3a764000081565b6002546001600160a01b031681565b60178181548110611c2757fe5b6000918252602090912001546001600160a01b0316905081565b6801158e460913d0000081565b60035460408051631e5395c960e21b815290516000926001600160a01b03169163794e5724916004808301926020929190829003018186803b15801561168d57600080fd5b60008054604080516272c7d360e71b8152905183926001600160a01b031691633963e980916004808301926020929190829003018186803b158015611cd757600080fd5b505afa158015611ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0f9190614da7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316633963e9806040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6157600080fd5b505afa158015611d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d999190614da7565b9050611dab828263ffffffff613a1316565b9250505090565b60185481565b600a546001600160a01b031681565b6000546001600160a01b031681565b60125481565b611de4612319565b610fac81613a38565b611df5611f48565b6001600160a01b0316336001600160a01b031614611e255760405162461bcd60e51b81526004016109bd90615178565b611e2e816122d4565b600480546001600160a01b0319166001600160a01b0383161790556040517f6493041f605f233753d9b16dd158c9f297b8eaca22b2d0dc402a454f5683a5b190610ee0908390614ee3565b6000805460408051630a7b61df60e11b8152905183926001600160a01b0316916314f6c3be916004808301926020929190829003018186803b158015611ebe57600080fd5b505afa158015611ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef69190614da7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6157600080fd5b600080604051611f5790614ec6565b6040519081900390205492915050565b60135481565b6000611f77612319565b6001600160a01b038316600090815260106020526040812054610ff1908463ffffffff613a1316565b60145481565b6003546001600160a01b031681565b6040518060400160405280600c81526020016b2a3937bb32a6b0b730b3b2b960a11b81525081565b6006546001600160a01b031681565b600d546001600160a01b031681565b600080600061200984613183565b9150915060006120198383613a95565b95945050505050565b6005546001600160a01b031681565b600061101082613aca565b6001600160a01b0381166000908152601060205260408120805460019091015490918061206885611094565b915061207385611711565b9050612085848363ffffffff613a1316565b9350612097838263ffffffff613a1316565b92509193509193565b6004546040516000916060916001600160a01b03909116906120c59084903690614eb6565b600060405180830381855af49150503d8060008114612100576040519150601f19603f3d011682016040523d82523d6000602084013e612105565b606091505b509150915081819061212a5760405162461bcd60e51b81526004016109bd9190614f8d565b50505050505050505050565b60155481565b60115481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061152061217361323b565b6130c8565b670ddd4b8c6c7d70d881565b61218c612319565b610fac816002613af6565b60006121a3838361161e565b9392505050565b600f5481565b60006121ba612319565b6001600160a01b038316600090815260106020526040812060010154611bd8908463ffffffff61245716565b60006110106121f3612166565b83613c0b565b6001600160a01b031660009081526010602052604090205490565b6009546001600160a01b031681565b60006017828154811061223257fe5b6000918252602090912001546001600160a01b031692915050565b600060016001600160a01b03831660009081526010602052604090206003015460ff16600481111561227b57fe5b1461228857506000611076565b506014546001600160a01b03821660009081526016602052604090205410919050565b60006110108261224d565b6000611520600e54613931565b6122cb612319565b610fac81613c4b565b6001600160a01b0381166122fa5760405162461bcd60e51b81526004016109bd90615059565b803b806115875760405162461bcd60e51b81526004016109bd906151ff565b6005546001600160a01b031633146123435760405162461bcd60e51b81526004016109bd9061511b565b565b61234e8161224d565b156124525761235c8161307f565b6000612367826110b2565b90506000612374836115b6565b6001600160a01b0384166000908152601060205260409020600101549091506123a3908363ffffffff613a1316565b6001600160a01b03841660009081526010602052604090206001810191909155546123d4908263ffffffff613a1316565b6001600160a01b0384166000908152601060205260409020556123f683613a38565b61240285858385613c9b565b6001600160a01b038316600081815260106020526040808220805460018201546002909201549251600080516020615439833981519152946124479492939291614f61565b60405180910390a250505b505050565b60006121a383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613d83565b6001600160a01b0381166124bf5760405162461bcd60e51b81526004016109bd90615017565b806001600160a01b03166124d1611f48565b6001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600060405161251490614ec6565b6040519081900390209190915550565b601780546001808201835560008381527fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1590920180546001600160a01b0319166001600160a01b0386161790559154909161257f9190612457565b6001600160a01b039290921660009081526010602052604090206003018054610100600160881b0319166101006001600160801b038516021790555090565b6001600160a01b03811660009081526010602052604081206001015481906125e590613daf565b6001600160a01b03841660009081526010602052604090206002018054908290556011549192509061262f908390612623908463ffffffff61245716565b9063ffffffff613a1316565b60118190556040517f6bac5e0eb3c44eb03a60ab11ec3a2c051771616aecadbcfff2630aabae520382916126629161531b565b60405180910390a15092915050565b60008261268057506000611010565b8282028284828161268d57fe5b04146121a35760405162461bcd60e51b81526004016109bd906150da565b60006121a383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613deb565b6000806126f983613aca565b9050600360009054906101000a90046001600160a01b03166001600160a01b0316635733d58f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561274957600080fd5b505afa15801561275d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127819190614da7565b1192915050565b612790614a6e565b612798614af6565b6127a0614a6e565b848252600060808301526127b2611c93565b60a08301526127bf611e79565b60c0830152600060208301525b835182602001511015612a9257838260200151815181106127e957fe5b6020908102919091018101516001600160a01b03166060840181905260009081526010909152604090206003015460019060ff16600481111561282857fe5b1461283257612a82565b61284082606001518761161e565b604083015260808201516129a757600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561289c57600080fd5b505afa1580156128b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d49190614da7565b8260400151101580156128e657508151155b156128f057612a82565b60006129058360c001518460a0015189613209565b90506129228989856060015186604001518760000151868d613e22565b6080810151845191935061293c919063ffffffff61245716565b8352608082015160a08401516129579163ffffffff61245716565b60a08085019190915282015160c08401516129779163ffffffff61245716565b60c084015261298684836141f8565b935061299b8360c001518460a001518961430f565b15608084015250612a82565b81608001518015612a405750600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b158015612a0157600080fd5b505afa158015612a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a399190614da7565b8260400151105b15612a8257612a598888846060015185600001516143ae565b60808101518351919250612a73919063ffffffff61245716565b8252612a7f83826141f8565b92505b60208201805160010190526127cc565b505095945050505050565b612aa5614a6e565b612aad614af6565b612ab5614a6e565b848252600060208301525b835182602001511015612a925783826020015181518110612add57fe5b60209081029190910101516001600160a01b031660608301819052612b02908761161e565b6040808401919091526003548151631e5395c960e21b815291516001600160a01b039091169163794e5724916004808301926020929190829003018186803b158015612b4d57600080fd5b505afa158015612b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b859190614da7565b82604001511015612bcd57612ba48888846060015185600001516143ae565b60808101518351919250612bbe919063ffffffff61245716565b8252612bca83826141f8565b92505b6020820180516001019052612ac0565b81612be757612e3b565b601854600090612c099061262384670de0b6b3a764000063ffffffff61267116565b90506000612c2e601954612623670de0b6b3a76400008761267190919063ffffffff16565b90506000612c47601154846126ab90919063ffffffff16565b90506000612c60601154846126ab90919063ffffffff16565b9050612c87612c7a6011548461267190919063ffffffff16565b859063ffffffff61245716565b601855601154612caf90612ca290839063ffffffff61267116565b849063ffffffff61245716565b601955601454612cc5908363ffffffff613a1316565b601455601554612cdb908263ffffffff613a1316565b60158190556014546040517f9f8bc8ab0daf5bceef75ecfd2085d1fcc6548c657ea970d9a23a60610d0737e392612d129291615324565b60405180910390a160405163121cbc4d60e11b81526001600160a01b03891690632439789a90612d4690899060040161531b565b600060405180830381600087803b158015612d6057600080fd5b505af1158015612d74573d6000803e3d6000fd5b505060405163f2e91d7160e01b81526001600160a01b038a16925063f2e91d719150612da490899060040161531b565b600060405180830381600087803b158015612dbe57600080fd5b505af1158015612dd2573d6000803e3d6000fd5b50506040516364a197f360e01b81526001600160a01b038b1692506364a197f39150612e04908a908990600401614f3d565b600060405180830381600087803b158015612e1e57600080fd5b505af1158015612e32573d6000803e3d6000fd5b50505050505050505b50505050565b6011546012819055506000826001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e8557600080fd5b505afa158015612e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ebd9190614da7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f0f57600080fd5b505afa158015612f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f479190614da7565b9050612f5d81612623848663ffffffff61245716565b60138190556012546040517f51bf4c63ec3cba9d03d43238abbdd979dd91bd16d9895c74ceea9118c7baaf6092612f949291615324565b60405180910390a150505050565b811561301357600954600754604051631062c15f60e11b81526001600160a01b03928316926320c582be92612fe09291169087908790600401614ef7565b600060405180830381600087803b158015612ffa57600080fd5b505af115801561300e573d6000803e3d6000fd5b505050505b8015612e3b576040516364a197f360e01b81526001600160a01b038516906364a197f3906130479086908590600401614f3d565b600060405180830381600087803b15801561306157600080fd5b505af1158015613075573d6000803e3d6000fd5b5050505050505050565b60016001600160a01b03821660009081526010602052604090206003015460ff1660048111156130ab57fe5b14610fac5760405162461bcd60e51b81526004016109bd906152cc565b600061101061315783600360009054906101000a90046001600160a01b03166001600160a01b03166328d28b5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561311f57600080fd5b505afa158015613133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126239190614da7565b670de0b6b3a76400006144e0565b60006121a3670de0b6b3a7640000611162858563ffffffff61267116565b6000806000613191846110b2565b9050600061319e856115b6565b6001600160a01b038616600090815260106020526040812060010154919250906131ce908463ffffffff613a1316565b6001600160a01b038716600090815260106020526040812054919250906131fb908463ffffffff613a1316565b919550909350505050915091565b6000821561323057600061322784611162878663ffffffff61267116565b91506121a39050565b506000199392505050565b6000806132466144f6565b9050600061325c670ddd4b8c6c7d70d883614512565b9050611dab670de0b6b3a764000061116283600e5461267190919063ffffffff16565b6000613296600f544261245790919063ffffffff16565b9050603c8110610fac5742600f8190556040517f860f8d2f0c74dd487e89e2883e3b25b8159ce1e1b3433a291cba7b82c508f3bc91610ee09161531b565b6132dc614a6e565b6132e4614af6565b6132ec614a6e565b848252600060808301526132fe611c93565b60a083015261330b611e79565b8260c001818152505086608001516001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b15801561335157600080fd5b505afa158015613365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133899190614b86565b82606001906001600160a01b031690816001600160a01b031681525050600087608001516001600160a01b0316631e2231436040518163ffffffff1660e01b815260040160206040518083038186803b1580156133e557600080fd5b505afa1580156133f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341d9190614b86565b6000602085015290505b8483602001511080156134505750806001600160a01b031683606001516001600160a01b031614155b156137705760808801516060840151604051632dc9c0eb60e21b81526000926001600160a01b03169163b72703ac9161348c9190600401614ee3565b60206040518083038186803b1580156134a457600080fd5b505afa1580156134b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134dc9190614b86565b90506134ec84606001518961161e565b6040850152608084015161366557600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561354857600080fd5b505afa15801561355c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135809190614da7565b84604001511015801561359257508351155b1561359d5750613770565b60006135b28560c001518660a001518b613209565b8a5160208c01516060880151604089015189519495506135d394868f613e22565b608081015186519195506135ed919063ffffffff61245716565b8552608084015160a08601516136089163ffffffff61245716565b8560a001818152505061363584610100015161146e8660a001518860c0015161245790919063ffffffff16565b60c086015261364486856141f8565b95506136598560c001518660a001518b61430f565b15608086015250613752565b836080015180156136fe5750600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b1580156136bf57600080fd5b505afa1580156136d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f79190614da7565b8460400151105b1561374c5761371f89600001518a60200151866060015187600001516143ae565b60808101518551919450613739919063ffffffff61245716565b845261374585846141f8565b9450613752565b50613770565b6001600160a01b031660608401526020830180516001019052613427565b505050949350505050565b613783614a6e565b61378b614af6565b613793614a6e565b600d54858352600060208401526001600160a01b03165b848360200151101561392557806001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b1580156137ef57600080fd5b505afa158015613803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138279190614b86565b6001600160a01b031660608401819052613841908861161e565b6040808501919091526003548151631e5395c960e21b815291516001600160a01b039091169163794e5724916004808301926020929190829003018186803b15801561388c57600080fd5b505afa1580156138a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c49190614da7565b83604001511015613910576138e38989856060015186600001516143ae565b608081015184519193506138fd919063ffffffff61245716565b835261390984836141f8565b9350613915565b613925565b60208301805160010190526137aa565b50505095945050505050565b600061101061398883600360009054906101000a90046001600160a01b03166001600160a01b031663f92d34336040518163ffffffff1660e01b815260040160206040518083038186803b15801561311f57600080fd5b600360009054906101000a90046001600160a01b03166001600160a01b031663240926696040518163ffffffff1660e01b815260040160206040518083038186803b1580156139d657600080fd5b505afa1580156139ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0e9190614da7565b6144e0565b6000828201838110156121a35760405162461bcd60e51b81526004016109bd90614fe0565b601480546001600160a01b038316600090815260166020526040908190209182556015546001909201829055915491517fc437f324d85e369394148dd9d62f98f534b382e01ed3dd2eb98138fb6d3ab49a92610ee0929091615324565b60008115613ac157613aba826111628568056bc75e2d6310000063ffffffff61267116565b9050611010565b50600019611010565b600080613ad5611e79565b90506000613ae1611c93565b9050613aee828286613209565b949350505050565b6000816004811115613b0457fe5b14158015613b1e57506001816004811115613b1b57fe5b14155b613b2457fe5b601754613b30816145bd565b6001600160a01b0383166000908152601060205260409020600301805483919060ff19166001836004811115613b6257fe5b02179055506001600160a01b0383166000908152601060209081526040808320600180820185905590849055601690925282208281550155613ba48382614663565b600d54604051631484968760e11b81526001600160a01b03909116906329092d0e90613bd4908690600401614ee3565b600060405180830381600087803b158015613bee57600080fd5b505af1158015613c02573d6000803e3d6000fd5b50505050505050565b600080613c2a670de0b6b3a7640000611162868663ffffffff61267116565b90508281106121a35760405162461bcd60e51b81526004016109bd90615234565b6001600160a01b038116600090815260106020526040902060020154601154613c7a908263ffffffff61245716565b601155506001600160a01b0316600090815260106020526040812060020155565b60405163121cbc4d60e11b81526001600160a01b03841690632439789a90613cc790859060040161531b565b600060405180830381600087803b158015613ce157600080fd5b505af1158015613cf5573d6000803e3d6000fd5b505060405163f2e91d7160e01b81526001600160a01b038716925063f2e91d719150613d2590859060040161531b565b600060405180830381600087803b158015613d3f57600080fd5b505af1158015613d53573d6000803e3d6000fd5b505060405163be41205f60e01b81526001600160a01b038616925063be41205f915061304790849060040161531b565b60008184841115613da75760405162461bcd60e51b81526004016109bd9190614f8d565b505050900390565b60008060135460001415613dc4575081611010565b600060125411613dd057fe5b6121a36013546111626012548661267190919063ffffffff16565b60008183613e0c5760405162461bcd60e51b81526004016109bd9190614f8d565b506000838581613e1857fe5b0495945050505050565b613e2a614a6e565b613e32614b3e565b601754600110613e4257506141ed565b613e4b8761203c565b60408501526020848101919091528401819052908352613e6a90614804565b604083018190526801158e460913d0000060608401526020830151613e949163ffffffff61245716565b8152670de0b6b3a76400008611613f5f57613eb9898983602001518460400151613c9b565b613ec287613c4b565b60006080830181905260a0830152815160c0830152805160e0830152613ee9876003613af6565b815160208301516040516001600160a01b038a169260008051602061541983398151915292613f1a92600290615332565b60405180910390a2866001600160a01b031660008051602061543983398151915260008060006002604051613f529493929190614f61565b60405180910390a26141eb565b670de0b6b3a764000086118015613ffa5750600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b158015613fbf57600080fd5b505afa158015613fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff79190614da7565b86105b1561404a57614013898983602001518460400151613c9b565b61401c87613c4b565b8151815161402b919087614890565b60e086015260c085015260a08401526080830152613ee9876003613af6565b600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561409857600080fd5b505afa1580156140ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140d09190614da7565b86101580156140de57508386105b80156140eb575081518510155b156141da57614104898983602001518460400151613c9b565b8461410b57fe5b61411487613c4b565b61412782600001518360200151856148fc565b9150614134876003613af6565b610100820151156141a957600854610100830151604051633f10abab60e01b81526001600160a01b0390921691633f10abab91614176918b9190600401614f3d565b600060405180830381600087803b15801561419057600080fd5b505af11580156141a4573d6000803e3d6000fd5b505050505b815160a08301516040516001600160a01b038a169260008051602061541983398151915292613f1a92600290615332565b6141e2614a6e565b91506141ed9050565b505b979650505050505050565b614200614a6e565b604080830151908401516142199163ffffffff613a1316565b6040820152606080830151908401516142379163ffffffff613a1316565b6060820152815160208401516142529163ffffffff613a1316565b602080830191909152820151835161426f9163ffffffff613a1316565b81526080808301519084015161428a9163ffffffff613a1316565b608082015260a080830151908401516142a89163ffffffff613a1316565b60a082015260c080830151908401516142c69163ffffffff613a1316565b60c082015260e080830151908401516142e49163ffffffff613a1316565b60e082015261010080830151908401516143039163ffffffff613a1316565b61010082015292915050565b60008061431d858585613209565b9050600360009054906101000a90046001600160a01b03166001600160a01b0316635733d58f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561436d57600080fd5b505afa158015614381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143a59190614da7565b11949350505050565b6143b6614a6e565b6143be614b3e565b6143c78461203c565b604085019081526020858101928352860192909252918452905190516143f1918891889190613c9b565b6143fa84613c4b565b6144078260200151614804565b604083018190526801158e460913d0000060608401526020830151600091614435919063ffffffff61245716565b905061444683600001518286614890565b60e087015260c086015260a08501526080840152614465856003613af6565b825160208401516040516001600160a01b038816926000805160206154198339815191529261449692600190615332565b60405180910390a2846001600160a01b0316600080516020615439833981519152600080600060016040516144ce9493929190614f61565b60405180910390a25050949350505050565b60008183106144ef57816121a3565b5090919050565b6000611520603c611162600f544261245790919063ffffffff16565b6000631f54050082111561452857631f54050091505b8161453c5750670de0b6b3a7640000611010565b670de0b6b3a764000083835b60018111156145b3576002810661457d576145638283614a0a565b915061457681600263ffffffff6126ab16565b90506145ae565b6145878284614a0a565b92506145938283614a0a565b91506145ab600261116283600163ffffffff61245716565b90505b614548565b61116e8284614a0a565b6001811180156146475750600d546040805163de8fa43160e01b815290516001926001600160a01b03169163de8fa431916004808301926020929190829003018186803b15801561460d57600080fd5b505afa158015614621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146459190614da7565b115b610fac5760405162461bcd60e51b81526004016109bd90615090565b6001600160a01b03821660009081526010602052604081206003015460ff169081600481111561468f57fe5b141580156146a9575060018160048111156146a657fe5b14155b6146af57fe5b6001600160a01b03831660009081526010602052604081206003015461010090046001600160801b03169083906146e7826001612457565b905080836001600160801b031611156146fc57fe5b60006017828154811061470b57fe5b600091825260209091200154601780546001600160a01b03909216925082916001600160801b03871690811061473d57fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316815260109091526040908190206003018054610100600160881b0319166101006001600160801b03881602179055517f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a906147c69083908790614f1b565b60405180910390a160178054806147d957fe5b600082815260209020810160001990810180546001600160a01b031916905501905550505050505050565b600354604080516324386ecd60e11b815290516000926001600160a01b031691634870dd9a916004808301926020929190829003018186803b15801561484957600080fd5b505afa15801561485d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148819190614da7565b828161488957fe5b0492915050565b600080808084156148e6576148a587866144e0565b93506148bb87611162888763ffffffff61267116565b92506148cd878563ffffffff61245716565b91506148df868463ffffffff61245716565b90506148f3565b5060009250829150859050845b93509350935093565b614904614a6e565b838152602080820184905260035460408051631e5395c960e21b815290516000936149a0938793611162936001600160a01b039092169263794e572492600480840193829003018186803b15801561495b57600080fd5b505afa15801561496f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149939190614da7565b889063ffffffff61267116565b90506149ab81614804565b604083018190526801158e460913d000006060840152608083018690526149d990829063ffffffff61245716565b60a08301526149ee848263ffffffff61245716565b61010083015250600060c0820181905260e08201529392505050565b600080614a1d848463ffffffff61267116565b9050613aee670de0b6b3a7640000611162836706f05b59d3b20000613a13565b6040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040518060e0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b803561101081615403565b600060208284031215614b7b578081fd5b81356121a381615403565b600060208284031215614b97578081fd5b81516121a381615403565b60008060408385031215614bb4578081fd5b8235614bbf81615403565b946020939093013593505050565b60006020808385031215614bdf578182fd5b823567ffffffffffffffff811115614bf5578283fd5b80840185601f820112614c06578384fd5b80359150614c1b614c16836153d8565b6153b1565b8281528381019082850185850284018601891015614c37578687fd5b8693505b848410156141eb57614c4d8982614b5f565b835260019390930192918501918501614c3b565b60006101c0808385031215614c74578182fd5b614c7d816153b1565b614c878585614b5f565b8152614c968560208601614b5f565b6020820152614ca88560408601614b5f565b6040820152614cba8560608601614b5f565b6060820152614ccc8560808601614b5f565b6080820152614cde8560a08601614b5f565b60a0820152614cf08560c08601614b5f565b60c0820152614d028560e08601614b5f565b60e08201526101009150614d1885838601614b5f565b828201526101209150614d2d85838601614b5f565b828201526101409150614d4285838601614b5f565b828201526101609150614d5785838601614b5f565b828201526101809150614d6c85838601614b5f565b828201526101a09150614d8185838601614b5f565b918101919091529392505050565b600060208284031215614da0578081fd5b5035919050565b600060208284031215614db8578081fd5b5051919050565b600080600080600080600060e0888a031215614dd9578283fd5b873596506020880135614deb81615403565b95506040880135614dfb81615403565b94506060880135614e0b81615403565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080600080600080600080888a03610160811215614e49578182fd5b8935985060208a0135614e5b81615403565b975060408a0135614e6b81615403565b965060608a0135614e7b81615403565b955060808a810135955060a08b0135945060c08b0135935060df1982011215614ea2578182fd5b5060e0890190509295985092959890939650565b6000828483379101908152919050565b7035b2bc9737bbb730b136329737bbb732b960791b815260110190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039290921682526001600160801b0316602082015260400190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b848152602081018490526040810183905260808101614f7f836153f8565b606083015295945050505050565b6000602080835283518082850152825b81811015614fb957858101830151858201604001528201614f9d565b81811115614fca5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526022908201527f4f776e61626c653a3a7365744f776e65723a20696e76616c6964206164647265604082015261737360f01b606082015260800190565b6020808252601e908201527f4163636f756e742063616e6e6f74206265207a65726f20616464726573730000604082015260600190565b6020808252602a908201527f54726f76654d616e616765723a204f6e6c79206f6e652074726f766520696e206040820152697468652073797374656d60b01b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252603b908201527f54726f76654d616e616765723a2043616c6c6572206973206e6f74207468652060408201527f426f72726f7765724f7065726174696f6e7320636f6e74726163740000000000606082015260800190565b60208082526017908201527613dddb98589b194e8e881858d8d95cdcc819195b9a5959604a1b604082015260600190565b60208082526036908201527f54726f76654d616e616765723a2043616c6c646174612061646472657373206160408201527572726179206d757374206e6f7420626520656d70747960501b606082015260800190565b6020808252818101527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f604082015260600190565b60208082526036908201527f54726f76654d616e616765723a2046656520776f756c642065617420757020616040820152751b1b081c995d1d5c9b99590818dbdb1b185d195c985b60521b606082015260800190565b60208082526022908201527f54726f76654d616e616765723a206e6f7468696e6720746f206c697175696461604082015261746560f01b606082015260800190565b6020808252602f908201527f54726f76654d616e616765723a2054726f766520646f6573206e6f742065786960408201526e1cdd081bdc881a5cc818db1bdcd959608a1b606082015260800190565b90815260200190565b918252602082015260400190565b8381526020810183905260608101615349836153f8565b6040830152949350505050565b858152602081018590526040810184905260a081016005841061537557fe5b60608201939093526001600160801b03919091166080909101529392505050565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff811182821017156153d057600080fd5b604052919050565b600067ffffffffffffffff8211156153ee578081fd5b5060209081020190565b806004811061107657fe5b6001600160a01b0381168114610fac57600080fdfeea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c408434c3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba2646970667358221220ea7a2e14e2c47ace35da011f86b13899244662101665bd2e8474cfc9f728a70964736f6c634300060b0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106104ac5760003560e01c8063756b253e1161026d578063b7f8cf9b11610151578063d293c710116100ce578063d815e8e911610092578063d815e8e914610929578063d9a7244414610931578063e056e91814610944578063e2ac77b014610957578063f36b24251461096a578063fe2ba84814610972576104ac565b8063d293c710146108d5578063d380a37c146108e8578063d3d6f843146108f0578063d5b3563514610903578063d66a255314610916576104ac565b8063bf9befb111610115578063bf9befb1146108a2578063c35bc550146108aa578063c52861f2146108b2578063c7b55481146108ba578063cbd138ae146108c2576104ac565b8063b7f8cf9b14610849578063b82f263d14610851578063b91af97c14610864578063bcd3752614610887578063be4b03341461089a576104ac565b8063887105d3116101ea5780639f070670116101ae5780639f07067014610809578063a20baee614610755578063a3f4df7e14610811578063ae7bec1914610826578063ae9187541461082e578063b0d8e18114610836576104ac565b8063887105d3146107d6578063893d20e8146107de57806396d711ff146107e65780639976cf45146107ee5780639dd233d214610801576104ac565b80637cf54e40116102315780637cf54e40146107985780637f7dde4a146107a0578063807d138d146107a857806382fe3eb9146107b057806387436936146107c3576104ac565b8063756b253e14610765578063759b303414610778578063794e572414610780578063795d26c314610788578063797250e314610790576104ac565b806342ccf1e41161039457806361ec893d116103115780636b444952116102d55780636b4449521461070e5780636ef6433814610716578063716c47e61461073a57806372423c171461074257806372fe25aa14610755578063741bef1a1461075d576104ac565b806361ec893d146106c5578063631203b0146106cd57806364cee260146106e0578063653d46e7146106f357806366ca4a2114610706576104ac565b80634e443d9e116103585780634e443d9e1461066f5780635733d58f1461068f5780635d6b480f146106975780635d8c9609146106aa5780635dba4c4a146106bd576104ac565b806342ccf1e41461061b578063477d66cf1461062e578063480cd5781461064157806349eefeee146106545780634a767d681461065c576104ac565b806318f2817a1161042d57806321e37801116103f157806321e37801146105d55780632b11551a146105e85780632f865568146105f057806331c903b0146106035780633a1285951461060b5780633cc7422514610613576104ac565b806318f2817a1461058c5780631a59a50e1461059f5780631bf43555146105b25780631e8b1c2b146105ba5780631f68f20a146105cd576104ac565b806312610e921161047457806312610e921461051f57806313af40351461053257806315d549f1146105455780631673c79a1461055857806317c62b1714610579576104ac565b806301f16e18146104b157806305b6f5ca146104c6578063071a7541146104d95780630b076557146104f75780630d43e8ad1461050a575b600080fd5b6104c46104bf366004614c61565b610985565b005b6104c46104d4366004614e2c565b610eeb565b6104e1610f82565b6040516104ee919061531b565b60405180910390f35b6104c4610505366004614b6a565b610f87565b610512610faf565b6040516104ee9190614ee3565b6104e161052d366004614ba2565b610fbe565b6104c4610540366004614b6a565b611016565b6104e1610553366004614b6a565b611057565b61056b610566366004614b6a565b61107b565b6040516104ee929190615324565b6104e1610587366004614b6a565b611094565b6104e161059a366004614b6a565b61109f565b6104e16105ad366004614b6a565b6110b2565b6104e1611178565b6104c46105c8366004614bcd565b611185565b6104e16114e6565b6104e16105e3366004614b6a565b6114ec565b6104e1611516565b6104c46105fe366004614b6a565b611525565b6104e161158b565b610512611598565b6105126115a7565b6104e1610629366004614b6a565b6115b6565b6104e161063c366004614d8f565b6115e7565b6104e161064f366004614b6a565b6115fa565b6104e1611618565b6104e161066a366004614ba2565b61161e565b61068261067d366004614d8f565b61163d565b6040516104ee9190614f56565b6104e1611648565b6104c46106a5366004614ba2565b6116c5565b6104e16106b8366004614b6a565b611711565b6104c461171c565b6104e1611787565b6104e16106db366004614d8f565b61178c565b6104e16106ee366004614b6a565b611799565b6104c4610701366004614d8f565b6117b7565b6104e1611b41565b6104e1611b53565b610729610724366004614b6a565b611b59565b6040516104ee959493929190615356565b610512611b93565b6104e1610750366004614ba2565b611ba2565b6104e1611bff565b610512611c0b565b610512610773366004614d8f565b611c1a565b6104e1611c41565b6104e1611c4e565b6104e1611c93565b6104e1611db2565b610512611db8565b610512611dc7565b6104e1611dd6565b6104c46107be366004614b6a565b611ddc565b6104c46107d1366004614b6a565b611ded565b6104e1611e79565b610512611f48565b6104e1611f67565b6104e16107fc366004614ba2565b611f6d565b6104e1611fa0565b610512611fa6565b610819611fb5565b6040516104ee9190614f8d565b610512611fdd565b610512611fec565b6104e1610844366004614b6a565b611ffb565b610512612022565b6104e161085f366004614d8f565b612031565b610877610872366004614b6a565b61203c565b6040516104ee9493929190615396565b6104c4610895366004614dbf565b6120a0565b6104e1612136565b6104e161213c565b6104e1612142565b6104e1612166565b6104e1612178565b6104c46108d0366004614b6a565b612184565b6104e16108e3366004614ba2565b612197565b6104e16121aa565b6104e16108fe366004614ba2565b6121b0565b6104e1610911366004614d8f565b6121e6565b6104e1610924366004614b6a565b6121f9565b610512612214565b61051261093f366004614d8f565b612223565b610682610952366004614b6a565b61224d565b610682610965366004614b6a565b6122ab565b6104e16122b6565b6104c4610980366004614b6a565b6122c3565b61098d611f48565b6001600160a01b0316336001600160a01b0316146109c65760405162461bcd60e51b81526004016109bd90615178565b60405180910390fd5b80516109d1906122d4565b6109de81602001516122d4565b6109eb81604001516122d4565b6109f881606001516122d4565b610a0581608001516122d4565b610a128160a001516122d4565b610a1f8160c001516122d4565b610a2c8160e001516122d4565b610a3a8161010001516122d4565b610a488161012001516122d4565b610a568161014001516122d4565b610a648161016001516122d4565b610a728161018001516122d4565b610a80816101a001516122d4565b8051600c80546001600160a01b03199081166001600160a01b038085169190911790925560208401516004805483169184169190911790556040808501516003805484169185169190911790556060850151600580548416918516919091179055608085015160008054841691851691909117905560a085015160018054841691851691909117905560c085015160068054841691851691909117905560e0850151600780548416918516919091179055610100850151600880548416918516919091179055610120850151600280548416918516919091179055610140850151600980548416918516919091179055610160850151600d80548416918516919091179055610180850151600a805484169185169190911790556101a0850151600b80549093169316929092179055517f84861842e6a98dd759145eb5e7b48279d0f02ebeabc8a69e5196b2f4c5023db991610bdb91614ee3565b60405180910390a17f6493041f605f233753d9b16dd158c9f297b8eaca22b2d0dc402a454f5683a5b18160200151604051610c169190614ee3565b60405180910390a17fbf65195e6d5213f6fcbce65b1454c925197a45e616dabd2e243542b039b050928160600151604051610c519190614ee3565b60405180910390a17f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed9858160600151604051610c8c9190614ee3565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828160800151604051610cc79190614ee3565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b8160a00151604051610d029190614ee3565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f8160c00151604051610d3d9190614ee3565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa08160e00151604051610d789190614ee3565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d816101000151604051610db49190614ee3565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db264816101200151604051610df09190614ee3565b60405180910390a17fcdf33850c44a1a874b5fefb51dae615ac6afebd581ef90d571f81b06541d8e9d816101400151604051610e2c9190614ee3565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe78800816101600151604051610e689190614ee3565b60405180910390a17f61e0c29d5028a9e4facaa476a46e78912e99f1ba945c9560b86b82ebe36ee52d816101800151604051610ea49190614ee3565b60405180910390a17f7624075ed781e3aa34b0f492d70d1bb5a6fcde04534165e20f990d2e546be4dd816101a00151604051610ee09190614ee3565b60405180910390a150565b6004546040516000916060916001600160a01b0390911690610f109084903690614eb6565b600060405180830381855af49150503d8060008114610f4b576040519150601f19603f3d011682016040523d82523d6000602084013e610f50565b606091505b5091509150818190610f755760405162461bcd60e51b81526004016109bd9190614f8d565b5050505050505050505050565b600281565b610f8f612319565b600054600154610fac916001600160a01b03908116911683612345565b50565b600c546001600160a01b031681565b6000610fc8612319565b6001600160a01b038316600090815260106020526040812054610ff1908463ffffffff61245716565b6001600160a01b03851660009081526010602052604090208190559150505b92915050565b61101e611f48565b6001600160a01b0316336001600160a01b03161461104e5760405162461bcd60e51b81526004016109bd90615178565b610fac81612499565b6000611061612319565b61106a82612524565b6001600160801b031690505b919050565b6016602052600090815260409020805460019091015482565b6000611010826115b6565b60006110a9612319565b611010826125be565b6001600160a01b03811660009081526016602052604081205460145482906110e0908363ffffffff61245716565b9050801580611119575060016001600160a01b03851660009081526010602052604090206003015460ff16600481111561111657fe5b14155b1561112957600092505050611076565b6001600160a01b0384166000908152601060205260408120600201549061116e670de0b6b3a7640000611162848663ffffffff61267116565b9063ffffffff6126ab16565b9695505050505050565b6809c2007651b250000081565b80516111a35760405162461bcd60e51b81526004016109bd906151a9565b6000546001546006546001600160a01b039283169291821691166111c5614a3d565b6111cd614a6e565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561121d57600080fd5b505af1158015611231573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112559190614da7565b826000018181525050826001600160a01b031663bdaf37ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561129757600080fd5b505afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf9190614da7565b602083015281516112df906126ed565b1580156040840152611307576113008585846000015185602001518a612788565b905061131f565b61131c8585846000015185602001518a612a9d565b90505b60008160200151116113435760405162461bcd60e51b81526004016109bd9061528a565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad9261137792600401615324565b600060405180830381600087803b15801561139157600080fd5b505af11580156113a5573d6000803e3d6000fd5b505050506113bd85858360c001518460e00151612bdd565b61010081015115611434576008546101008201516040516364a197f360e01b81526001600160a01b03888116936364a197f393611401939290911691600401614f3d565b600060405180830381600087803b15801561141b57600080fd5b505af115801561142f573d6000803e3d6000fd5b505050505b611442858260400151612e41565b602081015160608301526101008101516040820151825161147a929161146e919063ffffffff61245716565b9063ffffffff61245716565b608083018190526060808401516040808501519285015190517f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda9403946114c29490929091615396565b60405180910390a16114de853383606001518460400151612fa2565b505050505050565b600e5481565b6001600160a01b03811660009081526010602052604081206003015460ff16600481111561101057fe5b600061152061158b565b905090565b61152e8161307f565b60408051600180825281830190925260609160208083019080368337019050509050818160008151811061155e57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061158781611185565b5050565b6000611520600e546130c8565b600b546001600160a01b031681565b6001546001600160a01b031681565b6001600160a01b03811660009081526016602052604081206001015460155482906110e0908363ffffffff61245716565b60006110106115f4611b41565b83613165565b6001600160a01b031660009081526010602052604090206001015490565b60175490565b600080600061162c85613183565b91509150600061116e838387613209565b6000611010826126ed565b60035460408051635733d58f60e01b815290516000926001600160a01b031691635733d58f916004808301926020929190829003018186803b15801561168d57600080fd5b505afa1580156116a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190614da7565b6116cd612319565b8060048111156116d957fe5b6001600160a01b0383166000908152601060205260409020600301805460ff1916600183600481111561170857fe5b02179055505050565b6000611010826110b2565b611724612319565b600061172e61323b565b9050670de0b6b3a764000081111561174257fe5b600e8190556040517fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9061177790839061531b565b60405180910390a1610fac61327f565b603c81565b60006110106115f46122b6565b6001600160a01b031660009081526010602052604090206002015490565b6117bf614aba565b506040805160e081018252600080546001600160a01b0390811683526001548116602084015292820181905260608201819052600d548316608083015260a0820181905260c0820152600654909116611816614a3d565b61181e614a6e565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561186e57600080fd5b505af1158015611882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a69190614da7565b826000018181525050826001600160a01b031663bdaf37ea6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190614da7565b60208301528151611930906126ed565b1580156040840152611957576119508483600001518460200151886132d4565b9050611977565b61197484600001518560200151846000015185602001518961377b565b90505b600081602001511161199b5760405162461bcd60e51b81526004016109bd9061528a565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad926119cf92600401615324565b600060405180830381600087803b1580156119e957600080fd5b505af11580156119fd573d6000803e3d6000fd5b50505050611a1d846000015185602001518360c001518460e00151612bdd565b61010081015115611a945783516008546101008301516040516364a197f360e01b81526001600160a01b03938416936364a197f393611a6193911691600401614f3d565b600060405180830381600087803b158015611a7b57600080fd5b505af1158015611a8f573d6000803e3d6000fd5b505050505b611aa684600001518260400151612e41565b6020810151606083015261010081015160408201518251611ad2929161146e919063ffffffff61245716565b608083018190526060808401516040808501519285015190517f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda940394611b1a9490929091615396565b60405180910390a1611b3a84600001513383606001518460400151612fa2565b5050505050565b6000611520611b4e61323b565b613931565b60195481565b60106020526000908152604090208054600182015460028301546003909301549192909160ff81169061010090046001600160801b031685565b6004546001600160a01b031681565b6000611bac612319565b6001600160a01b038316600090815260106020526040812060010154611bd8908463ffffffff613a1316565b6001600160a01b038516600090815260106020526040902060010181905591505092915050565b670de0b6b3a764000081565b6002546001600160a01b031681565b60178181548110611c2757fe5b6000918252602090912001546001600160a01b0316905081565b6801158e460913d0000081565b60035460408051631e5395c960e21b815290516000926001600160a01b03169163794e5724916004808301926020929190829003018186803b15801561168d57600080fd5b60008054604080516272c7d360e71b8152905183926001600160a01b031691633963e980916004808301926020929190829003018186803b158015611cd757600080fd5b505afa158015611ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0f9190614da7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316633963e9806040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6157600080fd5b505afa158015611d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d999190614da7565b9050611dab828263ffffffff613a1316565b9250505090565b60185481565b600a546001600160a01b031681565b6000546001600160a01b031681565b60125481565b611de4612319565b610fac81613a38565b611df5611f48565b6001600160a01b0316336001600160a01b031614611e255760405162461bcd60e51b81526004016109bd90615178565b611e2e816122d4565b600480546001600160a01b0319166001600160a01b0383161790556040517f6493041f605f233753d9b16dd158c9f297b8eaca22b2d0dc402a454f5683a5b190610ee0908390614ee3565b6000805460408051630a7b61df60e11b8152905183926001600160a01b0316916314f6c3be916004808301926020929190829003018186803b158015611ebe57600080fd5b505afa158015611ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef69190614da7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6157600080fd5b600080604051611f5790614ec6565b6040519081900390205492915050565b60135481565b6000611f77612319565b6001600160a01b038316600090815260106020526040812054610ff1908463ffffffff613a1316565b60145481565b6003546001600160a01b031681565b6040518060400160405280600c81526020016b2a3937bb32a6b0b730b3b2b960a11b81525081565b6006546001600160a01b031681565b600d546001600160a01b031681565b600080600061200984613183565b9150915060006120198383613a95565b95945050505050565b6005546001600160a01b031681565b600061101082613aca565b6001600160a01b0381166000908152601060205260408120805460019091015490918061206885611094565b915061207385611711565b9050612085848363ffffffff613a1316565b9350612097838263ffffffff613a1316565b92509193509193565b6004546040516000916060916001600160a01b03909116906120c59084903690614eb6565b600060405180830381855af49150503d8060008114612100576040519150601f19603f3d011682016040523d82523d6000602084013e612105565b606091505b509150915081819061212a5760405162461bcd60e51b81526004016109bd9190614f8d565b50505050505050505050565b60155481565b60115481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061152061217361323b565b6130c8565b670ddd4b8c6c7d70d881565b61218c612319565b610fac816002613af6565b60006121a3838361161e565b9392505050565b600f5481565b60006121ba612319565b6001600160a01b038316600090815260106020526040812060010154611bd8908463ffffffff61245716565b60006110106121f3612166565b83613c0b565b6001600160a01b031660009081526010602052604090205490565b6009546001600160a01b031681565b60006017828154811061223257fe5b6000918252602090912001546001600160a01b031692915050565b600060016001600160a01b03831660009081526010602052604090206003015460ff16600481111561227b57fe5b1461228857506000611076565b506014546001600160a01b03821660009081526016602052604090205410919050565b60006110108261224d565b6000611520600e54613931565b6122cb612319565b610fac81613c4b565b6001600160a01b0381166122fa5760405162461bcd60e51b81526004016109bd90615059565b803b806115875760405162461bcd60e51b81526004016109bd906151ff565b6005546001600160a01b031633146123435760405162461bcd60e51b81526004016109bd9061511b565b565b61234e8161224d565b156124525761235c8161307f565b6000612367826110b2565b90506000612374836115b6565b6001600160a01b0384166000908152601060205260409020600101549091506123a3908363ffffffff613a1316565b6001600160a01b03841660009081526010602052604090206001810191909155546123d4908263ffffffff613a1316565b6001600160a01b0384166000908152601060205260409020556123f683613a38565b61240285858385613c9b565b6001600160a01b038316600081815260106020526040808220805460018201546002909201549251600080516020615439833981519152946124479492939291614f61565b60405180910390a250505b505050565b60006121a383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613d83565b6001600160a01b0381166124bf5760405162461bcd60e51b81526004016109bd90615017565b806001600160a01b03166124d1611f48565b6001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600060405161251490614ec6565b6040519081900390209190915550565b601780546001808201835560008381527fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1590920180546001600160a01b0319166001600160a01b0386161790559154909161257f9190612457565b6001600160a01b039290921660009081526010602052604090206003018054610100600160881b0319166101006001600160801b038516021790555090565b6001600160a01b03811660009081526010602052604081206001015481906125e590613daf565b6001600160a01b03841660009081526010602052604090206002018054908290556011549192509061262f908390612623908463ffffffff61245716565b9063ffffffff613a1316565b60118190556040517f6bac5e0eb3c44eb03a60ab11ec3a2c051771616aecadbcfff2630aabae520382916126629161531b565b60405180910390a15092915050565b60008261268057506000611010565b8282028284828161268d57fe5b04146121a35760405162461bcd60e51b81526004016109bd906150da565b60006121a383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613deb565b6000806126f983613aca565b9050600360009054906101000a90046001600160a01b03166001600160a01b0316635733d58f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561274957600080fd5b505afa15801561275d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127819190614da7565b1192915050565b612790614a6e565b612798614af6565b6127a0614a6e565b848252600060808301526127b2611c93565b60a08301526127bf611e79565b60c0830152600060208301525b835182602001511015612a9257838260200151815181106127e957fe5b6020908102919091018101516001600160a01b03166060840181905260009081526010909152604090206003015460019060ff16600481111561282857fe5b1461283257612a82565b61284082606001518761161e565b604083015260808201516129a757600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561289c57600080fd5b505afa1580156128b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d49190614da7565b8260400151101580156128e657508151155b156128f057612a82565b60006129058360c001518460a0015189613209565b90506129228989856060015186604001518760000151868d613e22565b6080810151845191935061293c919063ffffffff61245716565b8352608082015160a08401516129579163ffffffff61245716565b60a08085019190915282015160c08401516129779163ffffffff61245716565b60c084015261298684836141f8565b935061299b8360c001518460a001518961430f565b15608084015250612a82565b81608001518015612a405750600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b158015612a0157600080fd5b505afa158015612a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a399190614da7565b8260400151105b15612a8257612a598888846060015185600001516143ae565b60808101518351919250612a73919063ffffffff61245716565b8252612a7f83826141f8565b92505b60208201805160010190526127cc565b505095945050505050565b612aa5614a6e565b612aad614af6565b612ab5614a6e565b848252600060208301525b835182602001511015612a925783826020015181518110612add57fe5b60209081029190910101516001600160a01b031660608301819052612b02908761161e565b6040808401919091526003548151631e5395c960e21b815291516001600160a01b039091169163794e5724916004808301926020929190829003018186803b158015612b4d57600080fd5b505afa158015612b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b859190614da7565b82604001511015612bcd57612ba48888846060015185600001516143ae565b60808101518351919250612bbe919063ffffffff61245716565b8252612bca83826141f8565b92505b6020820180516001019052612ac0565b81612be757612e3b565b601854600090612c099061262384670de0b6b3a764000063ffffffff61267116565b90506000612c2e601954612623670de0b6b3a76400008761267190919063ffffffff16565b90506000612c47601154846126ab90919063ffffffff16565b90506000612c60601154846126ab90919063ffffffff16565b9050612c87612c7a6011548461267190919063ffffffff16565b859063ffffffff61245716565b601855601154612caf90612ca290839063ffffffff61267116565b849063ffffffff61245716565b601955601454612cc5908363ffffffff613a1316565b601455601554612cdb908263ffffffff613a1316565b60158190556014546040517f9f8bc8ab0daf5bceef75ecfd2085d1fcc6548c657ea970d9a23a60610d0737e392612d129291615324565b60405180910390a160405163121cbc4d60e11b81526001600160a01b03891690632439789a90612d4690899060040161531b565b600060405180830381600087803b158015612d6057600080fd5b505af1158015612d74573d6000803e3d6000fd5b505060405163f2e91d7160e01b81526001600160a01b038a16925063f2e91d719150612da490899060040161531b565b600060405180830381600087803b158015612dbe57600080fd5b505af1158015612dd2573d6000803e3d6000fd5b50506040516364a197f360e01b81526001600160a01b038b1692506364a197f39150612e04908a908990600401614f3d565b600060405180830381600087803b158015612e1e57600080fd5b505af1158015612e32573d6000803e3d6000fd5b50505050505050505b50505050565b6011546012819055506000826001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e8557600080fd5b505afa158015612e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ebd9190614da7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f0f57600080fd5b505afa158015612f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f479190614da7565b9050612f5d81612623848663ffffffff61245716565b60138190556012546040517f51bf4c63ec3cba9d03d43238abbdd979dd91bd16d9895c74ceea9118c7baaf6092612f949291615324565b60405180910390a150505050565b811561301357600954600754604051631062c15f60e11b81526001600160a01b03928316926320c582be92612fe09291169087908790600401614ef7565b600060405180830381600087803b158015612ffa57600080fd5b505af115801561300e573d6000803e3d6000fd5b505050505b8015612e3b576040516364a197f360e01b81526001600160a01b038516906364a197f3906130479086908590600401614f3d565b600060405180830381600087803b15801561306157600080fd5b505af1158015613075573d6000803e3d6000fd5b5050505050505050565b60016001600160a01b03821660009081526010602052604090206003015460ff1660048111156130ab57fe5b14610fac5760405162461bcd60e51b81526004016109bd906152cc565b600061101061315783600360009054906101000a90046001600160a01b03166001600160a01b03166328d28b5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561311f57600080fd5b505afa158015613133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126239190614da7565b670de0b6b3a76400006144e0565b60006121a3670de0b6b3a7640000611162858563ffffffff61267116565b6000806000613191846110b2565b9050600061319e856115b6565b6001600160a01b038616600090815260106020526040812060010154919250906131ce908463ffffffff613a1316565b6001600160a01b038716600090815260106020526040812054919250906131fb908463ffffffff613a1316565b919550909350505050915091565b6000821561323057600061322784611162878663ffffffff61267116565b91506121a39050565b506000199392505050565b6000806132466144f6565b9050600061325c670ddd4b8c6c7d70d883614512565b9050611dab670de0b6b3a764000061116283600e5461267190919063ffffffff16565b6000613296600f544261245790919063ffffffff16565b9050603c8110610fac5742600f8190556040517f860f8d2f0c74dd487e89e2883e3b25b8159ce1e1b3433a291cba7b82c508f3bc91610ee09161531b565b6132dc614a6e565b6132e4614af6565b6132ec614a6e565b848252600060808301526132fe611c93565b60a083015261330b611e79565b8260c001818152505086608001516001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b15801561335157600080fd5b505afa158015613365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133899190614b86565b82606001906001600160a01b031690816001600160a01b031681525050600087608001516001600160a01b0316631e2231436040518163ffffffff1660e01b815260040160206040518083038186803b1580156133e557600080fd5b505afa1580156133f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341d9190614b86565b6000602085015290505b8483602001511080156134505750806001600160a01b031683606001516001600160a01b031614155b156137705760808801516060840151604051632dc9c0eb60e21b81526000926001600160a01b03169163b72703ac9161348c9190600401614ee3565b60206040518083038186803b1580156134a457600080fd5b505afa1580156134b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134dc9190614b86565b90506134ec84606001518961161e565b6040850152608084015161366557600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561354857600080fd5b505afa15801561355c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135809190614da7565b84604001511015801561359257508351155b1561359d5750613770565b60006135b28560c001518660a001518b613209565b8a5160208c01516060880151604089015189519495506135d394868f613e22565b608081015186519195506135ed919063ffffffff61245716565b8552608084015160a08601516136089163ffffffff61245716565b8560a001818152505061363584610100015161146e8660a001518860c0015161245790919063ffffffff16565b60c086015261364486856141f8565b95506136598560c001518660a001518b61430f565b15608086015250613752565b836080015180156136fe5750600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b1580156136bf57600080fd5b505afa1580156136d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f79190614da7565b8460400151105b1561374c5761371f89600001518a60200151866060015187600001516143ae565b60808101518551919450613739919063ffffffff61245716565b845261374585846141f8565b9450613752565b50613770565b6001600160a01b031660608401526020830180516001019052613427565b505050949350505050565b613783614a6e565b61378b614af6565b613793614a6e565b600d54858352600060208401526001600160a01b03165b848360200151101561392557806001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b1580156137ef57600080fd5b505afa158015613803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138279190614b86565b6001600160a01b031660608401819052613841908861161e565b6040808501919091526003548151631e5395c960e21b815291516001600160a01b039091169163794e5724916004808301926020929190829003018186803b15801561388c57600080fd5b505afa1580156138a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c49190614da7565b83604001511015613910576138e38989856060015186600001516143ae565b608081015184519193506138fd919063ffffffff61245716565b835261390984836141f8565b9350613915565b613925565b60208301805160010190526137aa565b50505095945050505050565b600061101061398883600360009054906101000a90046001600160a01b03166001600160a01b031663f92d34336040518163ffffffff1660e01b815260040160206040518083038186803b15801561311f57600080fd5b600360009054906101000a90046001600160a01b03166001600160a01b031663240926696040518163ffffffff1660e01b815260040160206040518083038186803b1580156139d657600080fd5b505afa1580156139ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0e9190614da7565b6144e0565b6000828201838110156121a35760405162461bcd60e51b81526004016109bd90614fe0565b601480546001600160a01b038316600090815260166020526040908190209182556015546001909201829055915491517fc437f324d85e369394148dd9d62f98f534b382e01ed3dd2eb98138fb6d3ab49a92610ee0929091615324565b60008115613ac157613aba826111628568056bc75e2d6310000063ffffffff61267116565b9050611010565b50600019611010565b600080613ad5611e79565b90506000613ae1611c93565b9050613aee828286613209565b949350505050565b6000816004811115613b0457fe5b14158015613b1e57506001816004811115613b1b57fe5b14155b613b2457fe5b601754613b30816145bd565b6001600160a01b0383166000908152601060205260409020600301805483919060ff19166001836004811115613b6257fe5b02179055506001600160a01b0383166000908152601060209081526040808320600180820185905590849055601690925282208281550155613ba48382614663565b600d54604051631484968760e11b81526001600160a01b03909116906329092d0e90613bd4908690600401614ee3565b600060405180830381600087803b158015613bee57600080fd5b505af1158015613c02573d6000803e3d6000fd5b50505050505050565b600080613c2a670de0b6b3a7640000611162868663ffffffff61267116565b90508281106121a35760405162461bcd60e51b81526004016109bd90615234565b6001600160a01b038116600090815260106020526040902060020154601154613c7a908263ffffffff61245716565b601155506001600160a01b0316600090815260106020526040812060020155565b60405163121cbc4d60e11b81526001600160a01b03841690632439789a90613cc790859060040161531b565b600060405180830381600087803b158015613ce157600080fd5b505af1158015613cf5573d6000803e3d6000fd5b505060405163f2e91d7160e01b81526001600160a01b038716925063f2e91d719150613d2590859060040161531b565b600060405180830381600087803b158015613d3f57600080fd5b505af1158015613d53573d6000803e3d6000fd5b505060405163be41205f60e01b81526001600160a01b038616925063be41205f915061304790849060040161531b565b60008184841115613da75760405162461bcd60e51b81526004016109bd9190614f8d565b505050900390565b60008060135460001415613dc4575081611010565b600060125411613dd057fe5b6121a36013546111626012548661267190919063ffffffff16565b60008183613e0c5760405162461bcd60e51b81526004016109bd9190614f8d565b506000838581613e1857fe5b0495945050505050565b613e2a614a6e565b613e32614b3e565b601754600110613e4257506141ed565b613e4b8761203c565b60408501526020848101919091528401819052908352613e6a90614804565b604083018190526801158e460913d0000060608401526020830151613e949163ffffffff61245716565b8152670de0b6b3a76400008611613f5f57613eb9898983602001518460400151613c9b565b613ec287613c4b565b60006080830181905260a0830152815160c0830152805160e0830152613ee9876003613af6565b815160208301516040516001600160a01b038a169260008051602061541983398151915292613f1a92600290615332565b60405180910390a2866001600160a01b031660008051602061543983398151915260008060006002604051613f529493929190614f61565b60405180910390a26141eb565b670de0b6b3a764000086118015613ffa5750600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b158015613fbf57600080fd5b505afa158015613fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff79190614da7565b86105b1561404a57614013898983602001518460400151613c9b565b61401c87613c4b565b8151815161402b919087614890565b60e086015260c085015260a08401526080830152613ee9876003613af6565b600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561409857600080fd5b505afa1580156140ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140d09190614da7565b86101580156140de57508386105b80156140eb575081518510155b156141da57614104898983602001518460400151613c9b565b8461410b57fe5b61411487613c4b565b61412782600001518360200151856148fc565b9150614134876003613af6565b610100820151156141a957600854610100830151604051633f10abab60e01b81526001600160a01b0390921691633f10abab91614176918b9190600401614f3d565b600060405180830381600087803b15801561419057600080fd5b505af11580156141a4573d6000803e3d6000fd5b505050505b815160a08301516040516001600160a01b038a169260008051602061541983398151915292613f1a92600290615332565b6141e2614a6e565b91506141ed9050565b505b979650505050505050565b614200614a6e565b604080830151908401516142199163ffffffff613a1316565b6040820152606080830151908401516142379163ffffffff613a1316565b6060820152815160208401516142529163ffffffff613a1316565b602080830191909152820151835161426f9163ffffffff613a1316565b81526080808301519084015161428a9163ffffffff613a1316565b608082015260a080830151908401516142a89163ffffffff613a1316565b60a082015260c080830151908401516142c69163ffffffff613a1316565b60c082015260e080830151908401516142e49163ffffffff613a1316565b60e082015261010080830151908401516143039163ffffffff613a1316565b61010082015292915050565b60008061431d858585613209565b9050600360009054906101000a90046001600160a01b03166001600160a01b0316635733d58f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561436d57600080fd5b505afa158015614381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143a59190614da7565b11949350505050565b6143b6614a6e565b6143be614b3e565b6143c78461203c565b604085019081526020858101928352860192909252918452905190516143f1918891889190613c9b565b6143fa84613c4b565b6144078260200151614804565b604083018190526801158e460913d0000060608401526020830151600091614435919063ffffffff61245716565b905061444683600001518286614890565b60e087015260c086015260a08501526080840152614465856003613af6565b825160208401516040516001600160a01b038816926000805160206154198339815191529261449692600190615332565b60405180910390a2846001600160a01b0316600080516020615439833981519152600080600060016040516144ce9493929190614f61565b60405180910390a25050949350505050565b60008183106144ef57816121a3565b5090919050565b6000611520603c611162600f544261245790919063ffffffff16565b6000631f54050082111561452857631f54050091505b8161453c5750670de0b6b3a7640000611010565b670de0b6b3a764000083835b60018111156145b3576002810661457d576145638283614a0a565b915061457681600263ffffffff6126ab16565b90506145ae565b6145878284614a0a565b92506145938283614a0a565b91506145ab600261116283600163ffffffff61245716565b90505b614548565b61116e8284614a0a565b6001811180156146475750600d546040805163de8fa43160e01b815290516001926001600160a01b03169163de8fa431916004808301926020929190829003018186803b15801561460d57600080fd5b505afa158015614621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146459190614da7565b115b610fac5760405162461bcd60e51b81526004016109bd90615090565b6001600160a01b03821660009081526010602052604081206003015460ff169081600481111561468f57fe5b141580156146a9575060018160048111156146a657fe5b14155b6146af57fe5b6001600160a01b03831660009081526010602052604081206003015461010090046001600160801b03169083906146e7826001612457565b905080836001600160801b031611156146fc57fe5b60006017828154811061470b57fe5b600091825260209091200154601780546001600160a01b03909216925082916001600160801b03871690811061473d57fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316815260109091526040908190206003018054610100600160881b0319166101006001600160801b03881602179055517f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a906147c69083908790614f1b565b60405180910390a160178054806147d957fe5b600082815260209020810160001990810180546001600160a01b031916905501905550505050505050565b600354604080516324386ecd60e11b815290516000926001600160a01b031691634870dd9a916004808301926020929190829003018186803b15801561484957600080fd5b505afa15801561485d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148819190614da7565b828161488957fe5b0492915050565b600080808084156148e6576148a587866144e0565b93506148bb87611162888763ffffffff61267116565b92506148cd878563ffffffff61245716565b91506148df868463ffffffff61245716565b90506148f3565b5060009250829150859050845b93509350935093565b614904614a6e565b838152602080820184905260035460408051631e5395c960e21b815290516000936149a0938793611162936001600160a01b039092169263794e572492600480840193829003018186803b15801561495b57600080fd5b505afa15801561496f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149939190614da7565b889063ffffffff61267116565b90506149ab81614804565b604083018190526801158e460913d000006060840152608083018690526149d990829063ffffffff61245716565b60a08301526149ee848263ffffffff61245716565b61010083015250600060c0820181905260e08201529392505050565b600080614a1d848463ffffffff61267116565b9050613aee670de0b6b3a7640000611162836706f05b59d3b20000613a13565b6040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040518060e0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b803561101081615403565b600060208284031215614b7b578081fd5b81356121a381615403565b600060208284031215614b97578081fd5b81516121a381615403565b60008060408385031215614bb4578081fd5b8235614bbf81615403565b946020939093013593505050565b60006020808385031215614bdf578182fd5b823567ffffffffffffffff811115614bf5578283fd5b80840185601f820112614c06578384fd5b80359150614c1b614c16836153d8565b6153b1565b8281528381019082850185850284018601891015614c37578687fd5b8693505b848410156141eb57614c4d8982614b5f565b835260019390930192918501918501614c3b565b60006101c0808385031215614c74578182fd5b614c7d816153b1565b614c878585614b5f565b8152614c968560208601614b5f565b6020820152614ca88560408601614b5f565b6040820152614cba8560608601614b5f565b6060820152614ccc8560808601614b5f565b6080820152614cde8560a08601614b5f565b60a0820152614cf08560c08601614b5f565b60c0820152614d028560e08601614b5f565b60e08201526101009150614d1885838601614b5f565b828201526101209150614d2d85838601614b5f565b828201526101409150614d4285838601614b5f565b828201526101609150614d5785838601614b5f565b828201526101809150614d6c85838601614b5f565b828201526101a09150614d8185838601614b5f565b918101919091529392505050565b600060208284031215614da0578081fd5b5035919050565b600060208284031215614db8578081fd5b5051919050565b600080600080600080600060e0888a031215614dd9578283fd5b873596506020880135614deb81615403565b95506040880135614dfb81615403565b94506060880135614e0b81615403565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080600080600080600080888a03610160811215614e49578182fd5b8935985060208a0135614e5b81615403565b975060408a0135614e6b81615403565b965060608a0135614e7b81615403565b955060808a810135955060a08b0135945060c08b0135935060df1982011215614ea2578182fd5b5060e0890190509295985092959890939650565b6000828483379101908152919050565b7035b2bc9737bbb730b136329737bbb732b960791b815260110190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039290921682526001600160801b0316602082015260400190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b848152602081018490526040810183905260808101614f7f836153f8565b606083015295945050505050565b6000602080835283518082850152825b81811015614fb957858101830151858201604001528201614f9d565b81811115614fca5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526022908201527f4f776e61626c653a3a7365744f776e65723a20696e76616c6964206164647265604082015261737360f01b606082015260800190565b6020808252601e908201527f4163636f756e742063616e6e6f74206265207a65726f20616464726573730000604082015260600190565b6020808252602a908201527f54726f76654d616e616765723a204f6e6c79206f6e652074726f766520696e206040820152697468652073797374656d60b01b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252603b908201527f54726f76654d616e616765723a2043616c6c6572206973206e6f74207468652060408201527f426f72726f7765724f7065726174696f6e7320636f6e74726163740000000000606082015260800190565b60208082526017908201527613dddb98589b194e8e881858d8d95cdcc819195b9a5959604a1b604082015260600190565b60208082526036908201527f54726f76654d616e616765723a2043616c6c646174612061646472657373206160408201527572726179206d757374206e6f7420626520656d70747960501b606082015260800190565b6020808252818101527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f604082015260600190565b60208082526036908201527f54726f76654d616e616765723a2046656520776f756c642065617420757020616040820152751b1b081c995d1d5c9b99590818dbdb1b185d195c985b60521b606082015260800190565b60208082526022908201527f54726f76654d616e616765723a206e6f7468696e6720746f206c697175696461604082015261746560f01b606082015260800190565b6020808252602f908201527f54726f76654d616e616765723a2054726f766520646f6573206e6f742065786960408201526e1cdd081bdc881a5cc818db1bdcd959608a1b606082015260800190565b90815260200190565b918252602082015260400190565b8381526020810183905260608101615349836153f8565b6040830152949350505050565b858152602081018590526040810184905260a081016005841061537557fe5b60608201939093526001600160801b03919091166080909101529392505050565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff811182821017156153d057600080fd5b604052919050565b600067ffffffffffffffff8211156153ee578081fd5b5060209081020190565b806004811061107657fe5b6001600160a01b0381168114610fac57600080fdfeea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c408434c3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba2646970667358221220ea7a2e14e2c47ace35da011f86b13899244662101665bd2e8474cfc9f728a70964736f6c634300060b0033","abi":[{"inputs":[{"internalType":"uint256","name":"_bootstrapPeriod","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_activePoolAddress","type":"address"}],"name":"ActivePoolAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_baseRate","type":"uint256"}],"name":"BaseRateUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_newBorrowerOperationsAddress","type":"address"}],"name":"BorrowerOperationsAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_collSurplusPoolAddress","type":"address"}],"name":"CollSurplusPoolAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_defaultPoolAddress","type":"address"}],"name":"DefaultPoolAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_feeDistributorAddress","type":"address"}],"name":"FeeDistributorAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_gasPoolAddress","type":"address"}],"name":"GasPoolAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_L_ETH","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_L_ZUSDDebt","type":"uint256"}],"name":"LTermsUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_lastFeeOpTime","type":"uint256"}],"name":"LastFeeOpTimeUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_liquidatedDebt","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_liquidatedColl","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_collGasCompensation","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_ZUSDGasCompensation","type":"uint256"}],"name":"Liquidation","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_borrowerOperationsAddress","type":"address"}],"name":"LiquityBaseParamsAddressChanges","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_newPriceFeedAddress","type":"address"}],"name":"PriceFeedAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_attemptedZUSDAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_actualZUSDAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_ETHSent","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_ETHFee","type":"uint256"}],"name":"Redemption","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_sortedTrovesAddress","type":"address"}],"name":"SortedTrovesAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_stabilityPoolAddress","type":"address"}],"name":"StabilityPoolAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_totalStakesSnapshot","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_totalCollateralSnapshot","type":"uint256"}],"name":"SystemSnapshotsUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_newTotalStakes","type":"uint256"}],"name":"TotalStakesUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_borrower","type":"address"},{"indexed":false,"internalType":"uint256","name":"_newIndex","type":"uint256"}],"name":"TroveIndexUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_borrower","type":"address"},{"indexed":false,"internalType":"uint256","name":"_debt","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_coll","type":"uint256"},{"indexed":false,"internalType":"uint8","name":"operation","type":"uint8"}],"name":"TroveLiquidated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_troveManagerRedeemOps","type":"address"}],"name":"TroveManagerRedeemOpsAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_L_ETH","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_L_ZUSDDebt","type":"uint256"}],"name":"TroveSnapshotsUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_borrower","type":"address"},{"indexed":false,"internalType":"uint256","name":"_debt","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_coll","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"stake","type":"uint256"},{"indexed":false,"internalType":"uint8","name":"operation","type":"uint8"}],"name":"TroveUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_zeroStakingAddress","type":"address"}],"name":"ZEROStakingAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_zeroTokenAddress","type":"address"}],"name":"ZEROTokenAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_newZUSDTokenAddress","type":"address"}],"name":"ZUSDTokenAddressChanged","type":"event"},{"inputs":[],"name":"BETA","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BOOTSTRAP_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CCR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DECIMAL_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"L_ETH","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"L_ZUSDDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MCR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINUTE_DECAY_FACTOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_NET_DEBT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NAME","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SECONDS_IN_ONE_MINUTE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"TroveOwners","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"Troves","outputs":[{"internalType":"uint256","name":"debt","type":"uint256"},{"internalType":"uint256","name":"coll","type":"uint256"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"enum TroveManagerStorage.Status","name":"status","type":"uint8"},{"internalType":"uint128","name":"arrayIndex","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ZUSD_GAS_COMPENSATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_100pct","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"_getCurrentICR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"_getPendingETHReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"_getPendingZUSDDebtReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_getRedemptionRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"_hasPendingRewards","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_stabilityPool","outputs":[{"internalType":"contract IStabilityPool","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_zeroStaking","outputs":[{"internalType":"contract IZEROStaking","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_zeroToken","outputs":[{"internalType":"contract IZEROToken","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_zusdToken","outputs":[{"internalType":"contract IZUSDToken","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"activePool","outputs":[{"internalType":"contract IActivePool","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"addTroveOwnerToArray","outputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"applyPendingRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"baseRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_troveArray","type":"address[]"}],"name":"batchLiquidateTroves","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"borrowerOperationsAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"checkRecoveryMode","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"closeTrove","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decayBaseRateFromBorrowing","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"},{"internalType":"uint256","name":"_collDecrease","type":"uint256"}],"name":"decreaseTroveColl","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"},{"internalType":"uint256","name":"_debtDecrease","type":"uint256"}],"name":"decreaseTroveDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"defaultPool","outputs":[{"internalType":"contract IDefaultPool","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeDistributor","outputs":[{"internalType":"contract IFeeDistributor","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ZUSDDebt","type":"uint256"}],"name":"getBorrowingFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ZUSDDebt","type":"uint256"}],"name":"getBorrowingFeeWithDecay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBorrowingRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBorrowingRateWithDecay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"getCurrentICR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"getEntireDebtAndColl","outputs":[{"internalType":"uint256","name":"debt","type":"uint256"},{"internalType":"uint256","name":"coll","type":"uint256"},{"internalType":"uint256","name":"pendingZUSDDebtReward","type":"uint256"},{"internalType":"uint256","name":"pendingETHReward","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getEntireSystemColl","outputs":[{"internalType":"uint256","name":"entireSystemColl","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getEntireSystemDebt","outputs":[{"internalType":"uint256","name":"entireSystemDebt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"getNominalICR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOwner","outputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"getPendingETHReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"getPendingZUSDDebtReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ETHDrawn","type":"uint256"}],"name":"getRedemptionFeeWithDecay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRedemptionRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRedemptionRateWithDecay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"getTCR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"getTroveColl","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"getTroveDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getTroveFromTroveOwnersArray","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTroveOwnersCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"getTroveStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"getTroveStatus","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"hasPendingRewards","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"},{"internalType":"uint256","name":"_collIncrease","type":"uint256"}],"name":"increaseTroveColl","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"},{"internalType":"uint256","name":"_debtIncrease","type":"uint256"}],"name":"increaseTroveDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"lastETHError_Redistribution","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastFeeOperationTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastZUSDDebtError_Redistribution","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"liquidate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_n","type":"uint256"}],"name":"liquidateTroves","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"liquityBaseParams","outputs":[{"internalType":"contract ILiquityBaseParams","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"priceFeed","outputs":[{"internalType":"contract IPriceFeed","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ZUSDamount","type":"uint256"},{"internalType":"address","name":"_firstRedemptionHint","type":"address"},{"internalType":"address","name":"_upperPartialRedemptionHint","type":"address"},{"internalType":"address","name":"_lowerPartialRedemptionHint","type":"address"},{"internalType":"uint256","name":"_partialRedemptionHintNICR","type":"uint256"},{"internalType":"uint256","name":"_maxIterations","type":"uint256"},{"internalType":"uint256","name":"_maxFeePercentage","type":"uint256"}],"name":"redeemCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_dllrAmount","type":"uint256"},{"internalType":"address","name":"_firstRedemptionHint","type":"address"},{"internalType":"address","name":"_upperPartialRedemptionHint","type":"address"},{"internalType":"address","name":"_lowerPartialRedemptionHint","type":"address"},{"internalType":"uint256","name":"_partialRedemptionHintNICR","type":"uint256"},{"internalType":"uint256","name":"_maxIterations","type":"uint256"},{"internalType":"uint256","name":"_maxFeePercentage","type":"uint256"},{"components":[{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct IMassetManager.PermitParams","name":"_permitParams","type":"tuple"}],"name":"redeemCollateralViaDLLR","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"removeStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"rewardSnapshots","outputs":[{"internalType":"uint256","name":"ETH","type":"uint256"},{"internalType":"uint256","name":"ZUSDDebt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"_feeDistributorAddress","type":"address"},{"internalType":"address","name":"_troveManagerRedeemOps","type":"address"},{"internalType":"address","name":"_liquityBaseParamsAddress","type":"address"},{"internalType":"address","name":"_borrowerOperationsAddress","type":"address"},{"internalType":"address","name":"_activePoolAddress","type":"address"},{"internalType":"address","name":"_defaultPoolAddress","type":"address"},{"internalType":"address","name":"_stabilityPoolAddress","type":"address"},{"internalType":"address","name":"_gasPoolAddress","type":"address"},{"internalType":"address","name":"_collSurplusPoolAddress","type":"address"},{"internalType":"address","name":"_priceFeedAddress","type":"address"},{"internalType":"address","name":"_zusdTokenAddress","type":"address"},{"internalType":"address","name":"_sortedTrovesAddress","type":"address"},{"internalType":"address","name":"_zeroTokenAddress","type":"address"},{"internalType":"address","name":"_zeroStakingAddress","type":"address"}],"internalType":"struct ITroveManager.TroveManagerInitAddressesParams","name":"_troveManagerInitAddressesParams","type":"tuple"}],"name":"setAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_troveManagerRedeemOps","type":"address"}],"name":"setTroveManagerRedeemOps","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"},{"internalType":"uint256","name":"_num","type":"uint256"}],"name":"setTroveStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"sortedTroves","outputs":[{"internalType":"contract ISortedTroves","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalCollateralSnapshot","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalStakes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalStakesSnapshot","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"troveManagerRedeemOps","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"updateStakeAndTotalStakes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_borrower","type":"address"}],"name":"updateTroveRewardSnapshots","outputs":[],"stateMutability":"nonpayable","type":"function"}]}